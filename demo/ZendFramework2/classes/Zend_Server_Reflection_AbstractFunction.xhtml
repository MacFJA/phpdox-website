<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Server\Reflection\AbstractFunction - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#reflection">$reflection</a>
          </li>
          <li>
            <a href="#argv">$argv</a>
          </li>
          <li>
            <a href="#config">$config</a>
          </li>
          <li>
            <a href="#class">$class</a>
          </li>
          <li>
            <a href="#description">$description</a>
          </li>
          <li>
            <a href="#namespace">$namespace</a>
          </li>
          <li>
            <a href="#prototypes">$prototypes</a>
          </li>
          <li>
            <a href="#return">$return</a>
          </li>
          <li>
            <a href="#returnDesc">$returnDesc</a>
          </li>
          <li>
            <a href="#paramDesc">$paramDesc</a>
          </li>
          <li>
            <a href="#sigParams">$sigParams</a>
          </li>
          <li>
            <a href="#sigParamsDepth">$sigParamsDepth</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__call">__call</a>
          </li>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__get">__get</a>
          </li>
          <li>
            <a href="#__set">__set</a>
          </li>
          <li>
            <a href="#__wakeup">__wakeup</a>
          </li>
          <li>
            <a href="#_addTree">_addTree</a>
          </li>
          <li>
            <a href="#_buildSignatures">_buildSignatures</a>
          </li>
          <li>
            <a href="#_buildTree">_buildTree</a>
          </li>
          <li>
            <a href="#_reflect">_reflect</a>
          </li>
          <li>
            <a href="#getDescription">getDescription</a>
          </li>
          <li>
            <a href="#getInvokeArguments">getInvokeArguments</a>
          </li>
          <li>
            <a href="#getNamespace">getNamespace</a>
          </li>
          <li>
            <a href="#getPrototypes">getPrototypes</a>
          </li>
          <li>
            <a href="#setDescription">setDescription</a>
          </li>
          <li>
            <a href="#setNamespace">setNamespace</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Server\Reflection\</span>AbstractFunction</h2>
        <div class="file-notice">
          <p>Function/Method Reflection</p>
          <p>
            <pre>Decorates a ReflectionFunction. Allows setting and retrieving an alternate
'service' name (i.e., the name to be used when calling via a service),
setting and retrieving the description (originally set using the docblock
contents), retrieving the callback and callback type, retrieving additional
method invocation arguments, and retrieving the
method .
</pre>
          </p>
        </div>
        <ul class="fileinfos"/>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="reflection"/>
            <h4><span class="label protected">protected</span>object 
                
                $reflection</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="argv"/>
            <h4><span class="label protected">protected</span>array 
                
                $argv</h4>
            <ul class="varlist">
              <li>Additional arguments to pass to method on invocation</li>
            </ul>
          </li>
          <li>
            <a name="config"/>
            <h4><span class="label protected">protected</span>array 
                
                $config</h4>
            <ul class="varlist">
              <li>Used to store extra configuration for the method (typically done by the server class, e.g., to indicate whether or not to instantiate a class).<pre>Associative array; access is as properties via  and
</pre></li>
            </ul>
          </li>
          <li>
            <a name="class"/>
            <h4><span class="label protected">protected</span>string 
                
                $class</h4>
            <ul class="varlist">
              <li>Declaring class (needed for when serialization occurs)</li>
            </ul>
          </li>
          <li>
            <a name="description"/>
            <h4><span class="label protected">protected</span>string 
                
                $description</h4>
            <ul class="varlist">
              <li>Function/method description</li>
            </ul>
          </li>
          <li>
            <a name="namespace"/>
            <h4><span class="label protected">protected</span>string 
                
                $namespace</h4>
            <ul class="varlist">
              <li>Namespace with which to prefix function/method name</li>
            </ul>
          </li>
          <li>
            <a name="prototypes"/>
            <h4><span class="label protected">protected</span>array 
                
                $prototypes</h4>
            <ul class="varlist">
              <li>Prototypes</li>
            </ul>
          </li>
          <li>
            <a name="return"/>
            <h4><span class="label private">private</span>
                $return</h4>
          </li>
          <li>
            <a name="returnDesc"/>
            <h4><span class="label private">private</span>
                $returnDesc</h4>
          </li>
          <li>
            <a name="paramDesc"/>
            <h4><span class="label private">private</span>
                $paramDesc</h4>
          </li>
          <li>
            <a name="sigParams"/>
            <h4><span class="label private">private</span>
                $sigParams</h4>
          </li>
          <li>
            <a name="sigParamsDepth"/>
            <h4><span class="label private">private</span>
                $sigParamsDepth</h4>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Reflector.xhtml">Reflector</a></span><strong> $r</strong>, <span class="param-type"><span title="null|string">null|string</span></span><strong> $namespace</strong>, <span class="param-type">Array</span><strong> $argv</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$r</code> - </li>
                <li><code>$namespace</code> - </li>
                <li><code>$argv</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__call"/>
            <h4><span class="label public">public</span>__call<span style="font-size:90%;">( <span class="param-type">string</span><strong> $method</strong>, <span class="param-type">array</span><strong> $args</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Proxy reflection calls</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$method</code> - </li>
                <li><code>$args</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\BadMethodCallException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__get"/>
            <h4><span class="label public">public</span>__get<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Retrieve configuration parameters<pre>Values are retrieved by key from . Returns null if no
value found.
</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__set"/>
            <h4><span class="label public">public</span>__set<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong>, <span class="param-type">mixed</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set configuration parameters<pre>Values are stored by $key in .
</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
                <li><code>$value</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__wakeup"/>
            <h4><span class="label public">public</span>__wakeup<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Wakeup from serialization<pre>Reflection needs explicit instantiation to work correctly. Re-instantiate
reflection object on wakeup.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDescription"/>
            <h4><span class="label public">public</span>getDescription<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Retrieve the description</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getInvokeArguments"/>
            <h4><span class="label public">public</span>getInvokeArguments<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Retrieve additional invocation arguments</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getNamespace"/>
            <h4><span class="label public">public</span>getNamespace<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return method's namespace</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPrototypes"/>
            <h4><span class="label public">public</span>getPrototypes<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Retrieve all prototypes as array of {@link \Zend\Server\Reflection\Prototype}s</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setDescription"/>
            <h4><span class="label public">public</span>setDescription<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the description</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setNamespace"/>
            <h4><span class="label public">public</span>setNamespace<span style="font-size:90%;">( <span class="param-type">string</span><strong> $namespace</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set method's namespace</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$namespace</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_addTree"/>
            <h4><span class="label protected">protected</span>_addTree<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Zend_Server_Reflection_Node.xhtml">Zend\Server\Reflection\Node</a></span><strong> $parent</strong>, <span class="param-type">integer</span><strong> $level</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create signature node tree<pre>Recursive method to build the signature node tree. Increments through
each array in , adding every value of the next level
to the current value (unless the current value is null).
</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$parent</code> - </li>
                <li><code>$level</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_buildSignatures"/>
            <h4><span class="label protected">protected</span>_buildSignatures<span style="font-size:90%;">( <span class="param-type">array</span><strong> $return</strong>, <span class="param-type">string</span><strong> $returnDesc</strong>, <span class="param-type">array</span><strong> $paramTypes</strong>, <span class="param-type">array</span><strong> $paramDesc</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Build method signatures<pre>Builds method signatures using the array of return types and the array of
parameters types</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$return</code> - Array of return types</li>
                <li><code>$returnDesc</code> - Return value description</li>
                <li><code>$paramTypes</code> - Array of arguments (each an array of types)</li>
                <li><code>$paramDesc</code> - Array of parameter descriptions</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_buildTree"/>
            <h4><span class="label protected">protected</span>_buildTree<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Build the signature tree<pre>Builds a signature tree starting at the return values and descending
through each method argument. Returns an array of
{@link \Zend\Server\Reflection\Node}s.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_reflect"/>
            <h4><span class="label protected">protected</span>_reflect<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Use code reflection to create method signatures<pre>Determines the method help/description text from the function DocBlock
comment. Determines method signatures using a combination of
ReflectionFunction and parsing of DocBlock @param and @return values.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
