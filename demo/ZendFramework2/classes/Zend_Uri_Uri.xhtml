<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Uri\Uri - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#CHAR_UNRESERVED">CHAR_UNRESERVED</a>
          </li>
          <li>
            <a href="#CHAR_GEN_DELIMS">CHAR_GEN_DELIMS</a>
          </li>
          <li>
            <a href="#CHAR_SUB_DELIMS">CHAR_SUB_DELIMS</a>
          </li>
          <li>
            <a href="#CHAR_RESERVED">CHAR_RESERVED</a>
          </li>
          <li>
            <a href="#HOST_IPV4">HOST_IPV4</a>
          </li>
          <li>
            <a href="#HOST_IPV6">HOST_IPV6</a>
          </li>
          <li>
            <a href="#HOST_IPVFUTURE">HOST_IPVFUTURE</a>
          </li>
          <li>
            <a href="#HOST_IPVANY">HOST_IPVANY</a>
          </li>
          <li>
            <a href="#HOST_DNS">HOST_DNS</a>
          </li>
          <li>
            <a href="#HOST_DNS_OR_IPV4">HOST_DNS_OR_IPV4</a>
          </li>
          <li>
            <a href="#HOST_DNS_OR_IPV6">HOST_DNS_OR_IPV6</a>
          </li>
          <li>
            <a href="#HOST_DNS_OR_IPV4_OR_IPV6">HOST_DNS_OR_IPV4_OR_IPV6</a>
          </li>
          <li>
            <a href="#HOST_DNS_OR_IPVANY">HOST_DNS_OR_IPVANY</a>
          </li>
          <li>
            <a href="#HOST_REGNAME">HOST_REGNAME</a>
          </li>
          <li>
            <a href="#HOST_ALL">HOST_ALL</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#scheme">$scheme</a>
          </li>
          <li>
            <a href="#userInfo">$userInfo</a>
          </li>
          <li>
            <a href="#host">$host</a>
          </li>
          <li>
            <a href="#port">$port</a>
          </li>
          <li>
            <a href="#path">$path</a>
          </li>
          <li>
            <a href="#query">$query</a>
          </li>
          <li>
            <a href="#fragment">$fragment</a>
          </li>
          <li>
            <a href="#validHostTypes">$validHostTypes</a>
          </li>
          <li>
            <a href="#validSchemes">$validSchemes</a>
          </li>
          <li>
            <a href="#defaultPorts">$defaultPorts</a>
          </li>
          <li>
            <a href="#escaper">$escaper</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__toString">__toString</a>
          </li>
          <li>
            <a href="#decodeUrlEncodedChars">decodeUrlEncodedChars</a>
          </li>
          <li>
            <a href="#encodePath">encodePath</a>
          </li>
          <li>
            <a href="#encodeQueryFragment">encodeQueryFragment</a>
          </li>
          <li>
            <a href="#encodeUserInfo">encodeUserInfo</a>
          </li>
          <li>
            <a href="#getEscaper">getEscaper</a>
          </li>
          <li>
            <a href="#getFragment">getFragment</a>
          </li>
          <li>
            <a href="#getHost">getHost</a>
          </li>
          <li>
            <a href="#getPath">getPath</a>
          </li>
          <li>
            <a href="#getPort">getPort</a>
          </li>
          <li>
            <a href="#getQuery">getQuery</a>
          </li>
          <li>
            <a href="#getQueryAsArray">getQueryAsArray</a>
          </li>
          <li>
            <a href="#getScheme">getScheme</a>
          </li>
          <li>
            <a href="#getUserInfo">getUserInfo</a>
          </li>
          <li>
            <a href="#isAbsolute">isAbsolute</a>
          </li>
          <li>
            <a href="#isValid">isValid</a>
          </li>
          <li>
            <a href="#isValidDnsHostname">isValidDnsHostname</a>
          </li>
          <li>
            <a href="#isValidIpAddress">isValidIpAddress</a>
          </li>
          <li>
            <a href="#isValidRegName">isValidRegName</a>
          </li>
          <li>
            <a href="#isValidRelative">isValidRelative</a>
          </li>
          <li>
            <a href="#makeRelative">makeRelative</a>
          </li>
          <li>
            <a href="#merge">merge</a>
          </li>
          <li>
            <a href="#normalize">normalize</a>
          </li>
          <li>
            <a href="#normalizeFragment">normalizeFragment</a>
          </li>
          <li>
            <a href="#normalizeHost">normalizeHost</a>
          </li>
          <li>
            <a href="#normalizePath">normalizePath</a>
          </li>
          <li>
            <a href="#normalizePort">normalizePort</a>
          </li>
          <li>
            <a href="#normalizeQuery">normalizeQuery</a>
          </li>
          <li>
            <a href="#normalizeScheme">normalizeScheme</a>
          </li>
          <li>
            <a href="#parse">parse</a>
          </li>
          <li>
            <a href="#parseScheme">parseScheme</a>
          </li>
          <li>
            <a href="#removePathDotSegments">removePathDotSegments</a>
          </li>
          <li>
            <a href="#resolve">resolve</a>
          </li>
          <li>
            <a href="#setEscaper">setEscaper</a>
          </li>
          <li>
            <a href="#setFragment">setFragment</a>
          </li>
          <li>
            <a href="#setHost">setHost</a>
          </li>
          <li>
            <a href="#setPath">setPath</a>
          </li>
          <li>
            <a href="#setPort">setPort</a>
          </li>
          <li>
            <a href="#setQuery">setQuery</a>
          </li>
          <li>
            <a href="#setScheme">setScheme</a>
          </li>
          <li>
            <a href="#setUserInfo">setUserInfo</a>
          </li>
          <li>
            <a href="#toString">toString</a>
          </li>
          <li>
            <a href="#validateHost">validateHost</a>
          </li>
          <li>
            <a href="#validatePath">validatePath</a>
          </li>
          <li>
            <a href="#validatePort">validatePort</a>
          </li>
          <li>
            <a href="#validateQueryFragment">validateQueryFragment</a>
          </li>
          <li>
            <a href="#validateScheme">validateScheme</a>
          </li>
          <li>
            <a href="#validateUserInfo">validateUserInfo</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Uri\</span>Uri</h2>
        <div class="file-notice">
          <p>Generic URI handler</p>
        </div>
        <ul class="fileinfos"/>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Zend_Uri_UriInterface.xhtml">Zend\Uri\UriInterface</a>
          </li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="CHAR_UNRESERVED"/>CHAR_UNRESERVED = 'a-zA-Z0-9_\-\.~'<em> </em><p><li>Character classes defined in RFC-3986</li></p><hr/></li>
          <li><a name="CHAR_GEN_DELIMS"/>CHAR_GEN_DELIMS = ':\/\?#\[\]@'<hr/></li>
          <li><a name="CHAR_SUB_DELIMS"/>CHAR_SUB_DELIMS = '!\$&amp;\'\(\)\*\+,;='<hr/></li>
          <li><a name="CHAR_RESERVED"/>CHAR_RESERVED = ':\/\?#\[\]@!\$&amp;\'\(\)\*\+,;='<hr/></li>
          <li><a name="HOST_IPV4"/>HOST_IPV4 = 0x01<em> </em><p><li>Host part types represented as binary masks The binary mask consists of 5 bits in the following order: &lt;RegName&gt; | &lt;DNS&gt; | &lt;IPvFuture&gt; | &lt;IPv6&gt; | &lt;IPv4&gt; Place 1 or 0 in the different positions for enable or disable the part.<pre>Finally use a hexadecimal representation.</pre></li></p><hr/></li>
          <li><a name="HOST_IPV6"/>HOST_IPV6 = 0x02<hr/></li>
          <li><a name="HOST_IPVFUTURE"/>HOST_IPVFUTURE = 0x04<hr/></li>
          <li><a name="HOST_IPVANY"/>HOST_IPVANY = 0x07<hr/></li>
          <li><a name="HOST_DNS"/>HOST_DNS = 0x08<hr/></li>
          <li><a name="HOST_DNS_OR_IPV4"/>HOST_DNS_OR_IPV4 = 0x09<hr/></li>
          <li><a name="HOST_DNS_OR_IPV6"/>HOST_DNS_OR_IPV6 = 0x0A<hr/></li>
          <li><a name="HOST_DNS_OR_IPV4_OR_IPV6"/>HOST_DNS_OR_IPV4_OR_IPV6 = 0x0B<hr/></li>
          <li><a name="HOST_DNS_OR_IPVANY"/>HOST_DNS_OR_IPVANY = 0x0F<hr/></li>
          <li><a name="HOST_REGNAME"/>HOST_REGNAME = 0x10<hr/></li>
          <li><a name="HOST_ALL"/>HOST_ALL = 0x1F<hr/></li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="scheme"/>
            <h4><span class="label protected">protected</span>string 
                
                $scheme</h4>
            <ul class="varlist">
              <li>URI scheme</li>
            </ul>
          </li>
          <li>
            <a name="userInfo"/>
            <h4><span class="label protected">protected</span>string 
                
                $userInfo</h4>
            <ul class="varlist">
              <li>URI userInfo part (usually user:password in HTTP URLs)</li>
            </ul>
          </li>
          <li>
            <a name="host"/>
            <h4><span class="label protected">protected</span>string 
                
                $host</h4>
            <ul class="varlist">
              <li>URI hostname</li>
            </ul>
          </li>
          <li>
            <a name="port"/>
            <h4><span class="label protected">protected</span>integer 
                
                $port</h4>
            <ul class="varlist">
              <li>URI port</li>
            </ul>
          </li>
          <li>
            <a name="path"/>
            <h4><span class="label protected">protected</span>string 
                
                $path</h4>
            <ul class="varlist">
              <li>URI path</li>
            </ul>
          </li>
          <li>
            <a name="query"/>
            <h4><span class="label protected">protected</span>string 
                
                $query</h4>
            <ul class="varlist">
              <li>URI query string</li>
            </ul>
          </li>
          <li>
            <a name="fragment"/>
            <h4><span class="label protected">protected</span>string 
                
                $fragment</h4>
            <ul class="varlist">
              <li>URI fragment</li>
            </ul>
          </li>
          <li>
            <a name="validHostTypes"/>
            <h4><span class="label protected">protected</span>integer 
                
                $validHostTypes</h4>
            <ul class="varlist">
              <li>Which host part types are valid for this URI?</li>
            </ul>
          </li>
          <li>
            <a name="validSchemes"/>
            <h4><span class="label protected">protected</span>array 
                
                $validSchemes</h4>
            <ul class="varlist">
              <li>Array of valid schemes.<pre>Subclasses of this class that only accept specific schemes may set the
list of accepted schemes here. If not empty, when setScheme() is called
it will only accept the schemes listed here.</pre></li>
            </ul>
          </li>
          <li>
            <a name="defaultPorts"/>
            <h4><span class="label protected">protected</span>array 
                
                $defaultPorts</h4>
            <ul class="varlist">
              <li>List of default ports per scheme<pre>Inheriting URI classes may set this, and the normalization methods will
automatically remove the port if it is equal to the default port for the
current scheme</pre></li>
            </ul>
          </li>
          <li>
            <a name="escaper"/>
            <h4><span class="label protected">protected</span>object 
                
                $escaper</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><span title="Uri|string|null">Uri|string|null</span></span><strong> $uri</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create a new URI object</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$uri</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__toString"/>
            <h4><span class="label public">public</span>__toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Magic method to convert the URI to a string</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="encodePath"/>
            <h4><span class="label true">true</span><span class="label public">public</span>encodePath<span style="font-size:90%;">( <span class="param-type">string</span><strong> $path</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Encode the path<pre>Will replace all characters which are not strictly allowed in the path
part with percent-encoded representation</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$path</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="encodeQueryFragment"/>
            <h4><span class="label true">true</span><span class="label public">public</span>encodeQueryFragment<span style="font-size:90%;">( <span class="param-type">string</span><strong> $input</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>URL-encode a query string or fragment based on RFC-3986 guidelines.<pre>Note that query and fragment encoding allows more unencoded characters
than the usual rawurlencode() function would usually return - for example
'/' and ':' are allowed as literals.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="encodeUserInfo"/>
            <h4><span class="label true">true</span><span class="label public">public</span>encodeUserInfo<span style="font-size:90%;">( <span class="param-type">string</span><strong> $userInfo</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>URL-encode the user info part of a URI</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$userInfo</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEscaper"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getEscaper<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Retrieve Escaper instance<pre>Lazy-loads one if none provided</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFragment"/>
            <h4><span class="label public">public</span>getFragment<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the URI fragment</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHost"/>
            <h4><span class="label public">public</span>getHost<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the URI host</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPath"/>
            <h4><span class="label public">public</span>getPath<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the URI path</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPort"/>
            <h4><span class="label public">public</span>getPort<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the URI port</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getQuery"/>
            <h4><span class="label public">public</span>getQuery<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the URI query</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getQueryAsArray"/>
            <h4><span class="label public">public</span>getQueryAsArray<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the query string as an associative array of key =&gt; value pairs<pre>This is an extension to RFC-3986 but is quite useful when working with
most common URI types</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getScheme"/>
            <h4><span class="label public">public</span>getScheme<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the scheme part of the URI</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getUserInfo"/>
            <h4><span class="label public">public</span>getUserInfo<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the User-info (usually user:password) part</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isAbsolute"/>
            <h4><span class="label public">public</span>isAbsolute<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if the URI is an absolute or relative URI</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isValid"/>
            <h4><span class="label public">public</span>isValid<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if the URI is valid<pre>Note that a relative URI may still be valid</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isValidRelative"/>
            <h4><span class="label public">public</span>isValidRelative<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if the URI is a valid relative URI</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="makeRelative"/>
            <h4><span class="label public">public</span>makeRelative<span style="font-size:90%;">( <span class="param-type"><span title="Uri|string">Uri|string</span></span><strong> $baseUri</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Convert the link to a relative link by substracting a base URI<pre>This is the opposite of resolving a relative link - i.e. creating a
 relative reference link from an original URI and a base URI.

 If the two URIs do not intersect (e.g. the original URI is not in any
 way related to the base URI) the URI will not be modified.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$baseUri</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="merge"/>
            <h4><span class="label true">true</span><span class="label public">public</span>merge<span style="font-size:90%;">( <span class="param-type"><span title="Uri|string">Uri|string</span></span><strong> $baseUri</strong>, <span class="param-type"><span title="Uri|string">Uri|string</span></span><strong> $relativeUri</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Merge a base URI and a relative URI into a new URI object<pre>This convenience method wraps ::resolve() to allow users to quickly
create new absolute URLs without the need to instantiate and clone
URI objects.

If objects are passed in, none of the passed objects will be modified.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$baseUri</code> - </li>
                <li><code>$relativeUri</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="normalize"/>
            <h4><span class="label public">public</span>normalize<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Normalize the URI<pre>Normalizing a URI includes removing any redundant parent directory or
current directory references from the path (e.g. foo/bar/../baz becomes
foo/baz), normalizing the scheme case, decoding any over-encoded
characters etc.

Eventually, two normalized URLs pointing to the same resource should be
equal even if they were originally represented by two different strings</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parse"/>
            <h4><span class="label public">public</span>parse<span style="font-size:90%;">( <span class="param-type">string</span><strong> $uri</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parse a URI string</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$uri</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseScheme"/>
            <h4><span class="label true">true</span><span class="label public">public</span>parseScheme<span style="font-size:90%;">( <span class="param-type">string</span><strong> $uriString</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Extract only the scheme part out of a URI string.<pre>This is used by the parse() method, but is useful as a standalone public
method if one wants to test a URI string for it's scheme before doing
anything with it.

Will return the scheme if found, or NULL if no scheme found (URI may
still be valid, but not full)</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$uriString</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="removePathDotSegments"/>
            <h4><span class="label true">true</span><span class="label public">public</span>removePathDotSegments<span style="font-size:90%;">( <span class="param-type">string</span><strong> $path</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Remove any extra dot segments (/../, /./) from a path<pre>Algorithm is adapted from RFC-3986 section 5.2.4
(@link http://tools.ietf.org/html/rfc3986#section-5.2.4)</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$path</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="resolve"/>
            <h4><span class="label public">public</span>resolve<span style="font-size:90%;">( <span class="param-type"><span title="Uri|string">Uri|string</span></span><strong> $baseUri</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Convert a relative URI into an absolute URI using a base absolute URI as a reference.<pre>This is similar to merge() - only it uses the supplied URI as the
base reference instead of using the current URI as the base reference.

Merging algorithm is adapted from RFC-3986 section 5.2
(@link http://tools.ietf.org/html/rfc3986#section-5.2)</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$baseUri</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setEscaper"/>
            <h4><span class="label true">true</span><span class="label public">public</span>setEscaper<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Zend_Escaper_Escaper.xhtml">Zend\Escaper\Escaper</a></span><strong> $escaper</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set Escaper instance</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$escaper</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setFragment"/>
            <h4><span class="label public">public</span>setFragment<span style="font-size:90%;">( <span class="param-type">string</span><strong> $fragment</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the URI fragment part</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$fragment</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidUriPartException If the schema definition</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setHost"/>
            <h4><span class="label public">public</span>setHost<span style="font-size:90%;">( <span class="param-type">string</span><strong> $host</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the URI host<pre>Note that the generic syntax for URIs allows using host names which
are not necessarily IPv4 addresses or valid DNS host names. For example,
IPv6 addresses are allowed as well, and also an abstract "registered name"
which may be any name composed of a valid set of characters, including,
for example, tilda (~) and underscore (_) which are not allowed in DNS
names.

Subclasses of Uri may impose more strict validation of host names - for
example the HTTP RFC clearly states that only IPv4 and valid DNS names
are allowed in HTTP URIs.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$host</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidUriPartException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setPath"/>
            <h4><span class="label public">public</span>setPath<span style="font-size:90%;">( <span class="param-type">string</span><strong> $path</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the path</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$path</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setPort"/>
            <h4><span class="label public">public</span>setPort<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $port</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the port part of the URI</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$port</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setQuery"/>
            <h4><span class="label public">public</span>setQuery<span style="font-size:90%;">( <span class="param-type"><span title="string|array">string|array</span></span><strong> $query</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the query string<pre>If an array is provided, will encode this array of parameters into a
query string. Array values will be represented in the query string using
PHP's common square bracket notation.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$query</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setScheme"/>
            <h4><span class="label public">public</span>setScheme<span style="font-size:90%;">( <span class="param-type">string</span><strong> $scheme</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the URI scheme<pre>If the scheme is not valid according to the generic scheme syntax or
is not acceptable by the specific URI class (e.g. 'http' or 'https' are
the only acceptable schemes for the Zend\Uri\Http class) an exception
will be thrown.

You can check if a scheme is valid before setting it using the
validateScheme() method.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$scheme</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidUriPartException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setUserInfo"/>
            <h4><span class="label public">public</span>setUserInfo<span style="font-size:90%;">( <span class="param-type">string</span><strong> $userInfo</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the URI User-info part (usually user:password)</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$userInfo</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidUriPartException If the schema definition</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="toString"/>
            <h4><span class="label public">public</span>toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Compose the URI into a string</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidUriException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validateHost"/>
            <h4><span class="label true">true</span><span class="label public">public</span>validateHost<span style="font-size:90%;">( <span class="param-type">string</span><strong> $host</strong>, <span class="param-type">integer</span><strong> $allowed</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validate the host part<pre>Users may control which host types to allow by passing a second parameter
with a bitmask of HOST_* constants which are allowed. If not specified,
all address types will be allowed.

Note that the generic URI syntax allows different host representations,
including IPv4 addresses, IPv6 addresses and future IP address formats
enclosed in square brackets, and registered names which may be DNS names
or even more complex names. This is different (and is much more loose)
from what is commonly accepted as valid HTTP URLs for example.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$host</code> - </li>
                <li><code>$allowed</code> - bitmask of allowed host types</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validatePath"/>
            <h4><span class="label true">true</span><span class="label public">public</span>validatePath<span style="font-size:90%;">( <span class="param-type">string</span><strong> $path</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validate the path</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$path</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validatePort"/>
            <h4><span class="label true">true</span><span class="label public">public</span>validatePort<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $port</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validate the port<pre>Valid values include numbers between 1 and 65535, and empty values</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$port</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validateQueryFragment"/>
            <h4><span class="label true">true</span><span class="label public">public</span>validateQueryFragment<span style="font-size:90%;">( <span class="param-type">string</span><strong> $input</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if a URI query or fragment part is valid or not<pre>Query and Fragment parts are both restricted by the same syntax rules,
so the same validation method can be used for both.

You can encode a query or fragment part to ensure it is valid by passing
it through the encodeQueryFragment() method.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validateScheme"/>
            <h4><span class="label true">true</span><span class="label public">public</span>validateScheme<span style="font-size:90%;">( <span class="param-type">string</span><strong> $scheme</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if a scheme is valid or not<pre>Will check $scheme to be valid against the generic scheme syntax defined
in RFC-3986. If the class also defines specific acceptable schemes, will
also check that $scheme is one of them.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$scheme</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validateUserInfo"/>
            <h4><span class="label true">true</span><span class="label public">public</span>validateUserInfo<span style="font-size:90%;">( <span class="param-type">string</span><strong> $userInfo</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check that the userInfo part of a URI is valid</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$userInfo</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="decodeUrlEncodedChars"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>decodeUrlEncodedChars<span style="font-size:90%;">( <span class="param-type">string</span><strong> $input</strong>, <span class="param-type">string</span><strong> $allowed</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Decode all percent encoded characters which are allowed to be represented literally<pre>Will not decode any characters which are not listed in the 'allowed' list</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - </li>
                <li><code>$allowed</code> - Pattern of allowed characters</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isValidDnsHostname"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>isValidDnsHostname<span style="font-size:90%;">( <span class="param-type">string</span><strong> $host</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if an address is a valid DNS hostname</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$host</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isValidIpAddress"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>isValidIpAddress<span style="font-size:90%;">( <span class="param-type">string</span><strong> $host</strong>, <span class="param-type">integer</span><strong> $allowed</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if a host name is a valid IP address, depending on allowed IP address types</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$host</code> - </li>
                <li><code>$allowed</code> - allowed address types</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isValidRegName"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>isValidRegName<span style="font-size:90%;">( <span class="param-type">string</span><strong> $host</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if an address is a valid registered name (as defined by RFC-3986) address</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$host</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="normalizeFragment"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>normalizeFragment<span style="font-size:90%;">( <span class="param-type">string</span><strong> $fragment</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Normalize the fragment part<pre>Currently this is exactly the same as normalizeQuery().</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$fragment</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="normalizeHost"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>normalizeHost<span style="font-size:90%;">( <span class="param-type">string</span><strong> $host</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Normalize the host part<pre>By default this converts host names to lower case</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$host</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="normalizePath"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>normalizePath<span style="font-size:90%;">( <span class="param-type">string</span><strong> $path</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Normalize the path<pre>This involves removing redundant dot segments, decoding any over-encoded
characters and encoding everything that needs to be encoded and is not</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$path</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="normalizePort"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>normalizePort<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $port</strong>, <span class="param-type">string</span><strong> $scheme</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Normalize the port<pre>If the class defines a default port for the current scheme, and the
current port is default, it will be unset.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$port</code> - </li>
                <li><code>$scheme</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="normalizeQuery"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>normalizeQuery<span style="font-size:90%;">( <span class="param-type">string</span><strong> $query</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Normalize the query part<pre>This involves decoding everything that doesn't need to be encoded, and
encoding everything else</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$query</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="normalizeScheme"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>normalizeScheme<span style="font-size:90%;">( <span class="param-type">string</span><strong> $scheme</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Normalize the scheme<pre>Usually this means simply converting the scheme to lower case</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$scheme</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
