<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Session\Container - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#name">$name</a>
          </li>
          <li>
            <a href="#manager">$manager</a>
          </li>
          <li>
            <a href="#managerDefaultClass">$managerDefaultClass</a>
          </li>
          <li>
            <a href="#defaultManager">$defaultManager</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#append">append</a>
          </li>
          <li>
            <a href="#asort">asort</a>
          </li>
          <li>
            <a href="#count">count</a>
          </li>
          <li>
            <a href="#createContainer">createContainer</a>
          </li>
          <li>
            <a href="#exchangeArray">exchangeArray</a>
          </li>
          <li>
            <a href="#expireByExpiryTime">expireByExpiryTime</a>
          </li>
          <li>
            <a href="#expireByHops">expireByHops</a>
          </li>
          <li>
            <a href="#expireKeys">expireKeys</a>
          </li>
          <li>
            <a href="#getArrayCopy">getArrayCopy</a>
          </li>
          <li>
            <a href="#getDefaultManager">getDefaultManager</a>
          </li>
          <li>
            <a href="#getFlags">getFlags</a>
          </li>
          <li>
            <a href="#getIterator">getIterator</a>
          </li>
          <li>
            <a href="#getIterator">getIterator</a>
          </li>
          <li>
            <a href="#getIteratorClass">getIteratorClass</a>
          </li>
          <li>
            <a href="#getManager">getManager</a>
          </li>
          <li>
            <a href="#getName">getName</a>
          </li>
          <li>
            <a href="#getStorage">getStorage</a>
          </li>
          <li>
            <a href="#ksort">ksort</a>
          </li>
          <li>
            <a href="#natcasesort">natcasesort</a>
          </li>
          <li>
            <a href="#natsort">natsort</a>
          </li>
          <li>
            <a href="#offsetExists">offsetExists</a>
          </li>
          <li>
            <a href="#offsetExists">offsetExists</a>
          </li>
          <li>
            <a href="#offsetGet">offsetGet</a>
          </li>
          <li>
            <a href="#offsetGet">offsetGet</a>
          </li>
          <li>
            <a href="#offsetSet">offsetSet</a>
          </li>
          <li>
            <a href="#offsetSet">offsetSet</a>
          </li>
          <li>
            <a href="#offsetUnset">offsetUnset</a>
          </li>
          <li>
            <a href="#offsetUnset">offsetUnset</a>
          </li>
          <li>
            <a href="#serialize">serialize</a>
          </li>
          <li>
            <a href="#setDefaultManager">setDefaultManager</a>
          </li>
          <li>
            <a href="#setExpirationHops">setExpirationHops</a>
          </li>
          <li>
            <a href="#setExpirationSeconds">setExpirationSeconds</a>
          </li>
          <li>
            <a href="#setFlags">setFlags</a>
          </li>
          <li>
            <a href="#setIteratorClass">setIteratorClass</a>
          </li>
          <li>
            <a href="#setManager">setManager</a>
          </li>
          <li>
            <a href="#uasort">uasort</a>
          </li>
          <li>
            <a href="#uksort">uksort</a>
          </li>
          <li>
            <a href="#unserialize">unserialize</a>
          </li>
          <li>
            <a href="#verifyNamespace">verifyNamespace</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Session\</span>Container</h2>
        <div class="file-notice">
          <p>Session storage container</p>
          <p>
            <pre>Allows for interacting with session storage in isolated containers, which
may have their own expiries, or even expiries per key in the container.
Additionally, expiries may be absolute TTLs or measured in "hops", which
are based on how many times the key or container were accessed.</pre>
          </p>
        </div>
        <ul class="fileinfos"/>
        <h3>Constants</h3>
        <ul class="varlist"/>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="name"/>
            <h4><span class="label protected">protected</span>string 
                
                $name</h4>
            <ul class="varlist">
              <li>Container name</li>
            </ul>
          </li>
          <li>
            <a name="manager"/>
            <h4><span class="label protected">protected</span>object 
                
                $manager</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="managerDefaultClass"/>
            <h4><span class="label protected">protected</span>string 
                
                $managerDefaultClass</h4>
            <ul class="varlist">
              <li>Default manager class to use if no manager has been provided</li>
            </ul>
          </li>
          <li>
            <a name="defaultManager"/>
            <h4><span class="label protected">protected</span>object 
                
                $defaultManager</h4>
            <ul class="varlist">
              <li>Default manager to use when instantiating a container without providing a ManagerInterface</li>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type"><a href="../interfaces/Zend_Session_ManagerInterface.xhtml">Zend\Session\ManagerInterface</a></span><strong> $manager</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor<pre>Provide a name ('Default' if none provided) and a ManagerInterface instance.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - </li>
                <li><code>$manager</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="append"/>
            <h4><span class="label public">public</span>append<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Appends the value<pre>Appends a new value as the last element.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="asort"/>
            <h4><span class="label public">public</span>asort<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sort the entries by value</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="count"/>
            <h4><span class="label public">public</span>count<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the number of public properties in the ArrayObject</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="exchangeArray"/>
            <h4><span class="label public">public</span>exchangeArray<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $input</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Exchange the array for another one.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getArrayCopy"/>
            <h4><span class="label public">public</span>getArrayCopy<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Creates a copy of the ArrayObject.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDefaultManager"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getDefaultManager<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the default ManagerInterface instance<pre>If none provided, instantiates one of type </pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException if invalid manager default class provided</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFlags"/>
            <h4><span class="label public">public</span>getFlags<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the behavior flags.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getIterator"/>
            <h4><span class="label public">public</span>getIterator<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Iterate over session container</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getIterator"/>
            <h4><span class="label public">public</span>getIterator<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create a new iterator from an ArrayObject instance</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getIteratorClass"/>
            <h4><span class="label public">public</span>getIteratorClass<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the iterator classname for the ArrayObject.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getManager"/>
            <h4><span class="label public">public</span>getManager<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get manager instance</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getName"/>
            <h4><span class="label public">public</span>getName<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get container name</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="ksort"/>
            <h4><span class="label public">public</span>ksort<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sort the entries by key</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="natcasesort"/>
            <h4><span class="label public">public</span>natcasesort<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sort an array using a case insensitive "natural order" algorithm<pre>This method is a case insensitive version of ArrayObject::natsort.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="natsort"/>
            <h4><span class="label public">public</span>natsort<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sort entries using a "natural order" algorithm</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetExists"/>
            <h4><span class="label public">public</span>offsetExists<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Determine if the key exists</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetExists"/>
            <h4><span class="label public">public</span>offsetExists<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $index</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns whether the requested index exists</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetGet"/>
            <h4><span class="label public">public</span>offsetGet<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Retrieve a specific key in the container</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetGet"/>
            <h4><span class="label public">public</span>offsetGet<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $index</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the value at the specified index</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetSet"/>
            <h4><span class="label public">public</span>offsetSet<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong>, <span class="param-type">mixed</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Store a value within the container</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
                <li><code>$value</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetSet"/>
            <h4><span class="label public">public</span>offsetSet<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $index</strong>, <span class="param-type">invalid method call</span><strong> $newval</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the value at the specified index to newval</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetUnset"/>
            <h4><span class="label public">public</span>offsetUnset<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Unset a single key in the container</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetUnset"/>
            <h4><span class="label public">public</span>offsetUnset<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $index</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Unsets the value at the specified index</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="serialize"/>
            <h4><span class="label public">public</span>serialize<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Serialize an ArrayObject</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setDefaultManager"/>
            <h4><span class="label true">true</span><span class="label public">public</span>setDefaultManager<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Zend_Session_ManagerInterface.xhtml">Zend\Session\ManagerInterface</a></span><strong> $manager</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the default ManagerInterface instance to use when none provided to constructor</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$manager</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setExpirationHops"/>
            <h4><span class="label public">public</span>setExpirationHops<span style="font-size:90%;">( <span class="param-type">int</span><strong> $hops</strong>, <span class="param-type"><span title="null|string|array">null|string|array</span></span><strong> $vars</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set expiration hops for the container, a single key, or set of keys</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$hops</code> - </li>
                <li><code>$vars</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setExpirationSeconds"/>
            <h4><span class="label public">public</span>setExpirationSeconds<span style="font-size:90%;">( <span class="param-type">int</span><strong> $ttl</strong>, <span class="param-type"><span title="string|array|null">string|array|null</span></span><strong> $vars</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set expiration TTL<pre>Set the TTL for the entire container, a single key, or a set of keys.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$ttl</code> - TTL in seconds</li>
                <li><code>$vars</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setFlags"/>
            <h4><span class="label public">public</span>setFlags<span style="font-size:90%;">( <span class="param-type"/><strong> $flags</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the behavior flags.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setIteratorClass"/>
            <h4><span class="label public">public</span>setIteratorClass<span style="font-size:90%;">( <span class="param-type">string</span><strong> $iterator_class</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the iterator classname for the ArrayObject.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="uasort"/>
            <h4><span class="label public">public</span>uasort<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $cmp_function</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sort the entries with a user-defined comparison function and maintain key association<pre>This function sorts the entries such that keys maintain their correlation with the entry that they are associated with, using a user-defined comparison function.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="uksort"/>
            <h4><span class="label public">public</span>uksort<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $cmp_function</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sort the entries by keys using a user-defined comparison function</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="unserialize"/>
            <h4><span class="label public">public</span>unserialize<span style="font-size:90%;">( <span class="param-type">string</span><strong> $serialized</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Unserialize an ArrayObject</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="createContainer"/>
            <h4><span class="label protected">protected</span>createContainer<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create a new container object on which to act</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="expireByExpiryTime"/>
            <h4><span class="label protected">protected</span>expireByExpiryTime<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Zend_Session_Storage_StorageInterface.xhtml">Zend\Session\Storage\StorageInterface</a></span><strong> $storage</strong>, <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Expire a key by expiry time<pre>Checks to see if the entire container has expired based on TTL setting,
or the individual key.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$storage</code> - </li>
                <li><code>$name</code> - Container name</li>
                <li><code>$key</code> - Key in container to check</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="expireByHops"/>
            <h4><span class="label protected">protected</span>expireByHops<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Zend_Session_Storage_StorageInterface.xhtml">Zend\Session\Storage\StorageInterface</a></span><strong> $storage</strong>, <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Expire key by session hops<pre>Determines whether the container or an individual key within it has
expired based on session hops</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$storage</code> - </li>
                <li><code>$name</code> - </li>
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="expireKeys"/>
            <h4><span class="label protected">protected</span>expireKeys<span style="font-size:90%;">( <span class="param-type"><span title="null|string">null|string</span></span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Determine whether a given key needs to be expired<pre>Returns true if the key has expired, false otherwise.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getStorage"/>
            <h4><span class="label protected">protected</span>getStorage<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get session storage object<pre>Proxies to ManagerInterface::getStorage()</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setManager"/>
            <h4><span class="label protected">protected</span>setManager<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Zend_Session_ManagerInterface.xhtml">Zend\Session\ManagerInterface</a></span><strong> $manager</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set session manager</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$manager</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="verifyNamespace"/>
            <h4><span class="label protected">protected</span>verifyNamespace<span style="font-size:90%;">( <span class="param-type"><span title="bool">bool</span></span><strong> $createContainer</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Verify container namespace<pre>Checks to see if a container exists within the Storage object already.
If not, one is created; if so, checks to see if it's an ArrayObject.
If not, it raises an exception; otherwise, it returns the Storage
object.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$createContainer</code> - Whether or not to create the container for the namespace</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Returns null only if $createContainer is false</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
