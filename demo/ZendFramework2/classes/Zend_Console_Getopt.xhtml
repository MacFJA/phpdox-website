<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Console\Getopt - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#MODE_ZEND">MODE_ZEND</a>
          </li>
          <li>
            <a href="#MODE_GNU">MODE_GNU</a>
          </li>
          <li>
            <a href="#PARAM_REQUIRED">PARAM_REQUIRED</a>
          </li>
          <li>
            <a href="#PARAM_OPTIONAL">PARAM_OPTIONAL</a>
          </li>
          <li>
            <a href="#TYPE_STRING">TYPE_STRING</a>
          </li>
          <li>
            <a href="#TYPE_WORD">TYPE_WORD</a>
          </li>
          <li>
            <a href="#TYPE_INTEGER">TYPE_INTEGER</a>
          </li>
          <li>
            <a href="#TYPE_NUMERIC_FLAG">TYPE_NUMERIC_FLAG</a>
          </li>
          <li>
            <a href="#CONFIG_RULEMODE">CONFIG_RULEMODE</a>
          </li>
          <li>
            <a href="#CONFIG_DASHDASH">CONFIG_DASHDASH</a>
          </li>
          <li>
            <a href="#CONFIG_IGNORECASE">CONFIG_IGNORECASE</a>
          </li>
          <li>
            <a href="#CONFIG_PARSEALL">CONFIG_PARSEALL</a>
          </li>
          <li>
            <a href="#CONFIG_CUMULATIVE_PARAMETERS">CONFIG_CUMULATIVE_PARAMETERS</a>
          </li>
          <li>
            <a href="#CONFIG_CUMULATIVE_FLAGS">CONFIG_CUMULATIVE_FLAGS</a>
          </li>
          <li>
            <a href="#CONFIG_PARAMETER_SEPARATOR">CONFIG_PARAMETER_SEPARATOR</a>
          </li>
          <li>
            <a href="#CONFIG_FREEFORM_FLAGS">CONFIG_FREEFORM_FLAGS</a>
          </li>
          <li>
            <a href="#CONFIG_NUMERIC_FLAGS">CONFIG_NUMERIC_FLAGS</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#getoptConfig">$getoptConfig</a>
          </li>
          <li>
            <a href="#argv">$argv</a>
          </li>
          <li>
            <a href="#progname">$progname</a>
          </li>
          <li>
            <a href="#rules">$rules</a>
          </li>
          <li>
            <a href="#ruleMap">$ruleMap</a>
          </li>
          <li>
            <a href="#options">$options</a>
          </li>
          <li>
            <a href="#remainingArgs">$remainingArgs</a>
          </li>
          <li>
            <a href="#parsed">$parsed</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__get">__get</a>
          </li>
          <li>
            <a href="#__isset">__isset</a>
          </li>
          <li>
            <a href="#__set">__set</a>
          </li>
          <li>
            <a href="#__toString">__toString</a>
          </li>
          <li>
            <a href="#__unset">__unset</a>
          </li>
          <li>
            <a href="#_addRulesModeGnu">_addRulesModeGnu</a>
          </li>
          <li>
            <a href="#_addRulesModeZend">_addRulesModeZend</a>
          </li>
          <li>
            <a href="#_checkParameterType">_checkParameterType</a>
          </li>
          <li>
            <a href="#_parseLongOption">_parseLongOption</a>
          </li>
          <li>
            <a href="#_parseShortOptionCluster">_parseShortOptionCluster</a>
          </li>
          <li>
            <a href="#_parseSingleOption">_parseSingleOption</a>
          </li>
          <li>
            <a href="#_setBooleanFlagValue">_setBooleanFlagValue</a>
          </li>
          <li>
            <a href="#_setNumericOptionValue">_setNumericOptionValue</a>
          </li>
          <li>
            <a href="#_setSingleOptionValue">_setSingleOptionValue</a>
          </li>
          <li>
            <a href="#addArguments">addArguments</a>
          </li>
          <li>
            <a href="#addRules">addRules</a>
          </li>
          <li>
            <a href="#getArguments">getArguments</a>
          </li>
          <li>
            <a href="#getOption">getOption</a>
          </li>
          <li>
            <a href="#getOptions">getOptions</a>
          </li>
          <li>
            <a href="#getRemainingArgs">getRemainingArgs</a>
          </li>
          <li>
            <a href="#getUsageMessage">getUsageMessage</a>
          </li>
          <li>
            <a href="#parse">parse</a>
          </li>
          <li>
            <a href="#setAliases">setAliases</a>
          </li>
          <li>
            <a href="#setArguments">setArguments</a>
          </li>
          <li>
            <a href="#setHelp">setHelp</a>
          </li>
          <li>
            <a href="#setOption">setOption</a>
          </li>
          <li>
            <a href="#setOptions">setOptions</a>
          </li>
          <li>
            <a href="#toArray">toArray</a>
          </li>
          <li>
            <a href="#toJson">toJson</a>
          </li>
          <li>
            <a href="#toString">toString</a>
          </li>
          <li>
            <a href="#toXml">toXml</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Console\</span>Getopt</h2>
        <div class="file-notice">
          <p>Getopt is a class to parse options for command-line applications.</p>
          <p>
            <pre>Terminology:
Argument: an element of the argv array.  This may be part of an option,
  or it may be a non-option command-line argument.
Flag: the letter or word set off by a '-' or '--'.  Example: in '--output filename',
  '--output' is the flag.
Parameter: the additional argument that is associated with the option.
  Example: in '--output filename', the 'filename' is the parameter.
Option: the combination of a flag and its parameter, if any.
  Example: in '--output filename', the whole thing is the option.

The following features are supported:

- Short flags like '-a'.  Short flags are preceded by a single
  dash.  Short flags may be clustered e.g. '-abc', which is the
  same as '-a' '-b' '-c'.
- Long flags like '--verbose'.  Long flags are preceded by a
  double dash.  Long flags may not be clustered.
- Options may have a parameter, e.g. '--output filename'.
- Parameters for long flags may also be set off with an equals sign,
  e.g. '--output=filename'.
- Parameters for long flags may be checked as string, word, or integer.
- Automatic generation of a helpful usage message.
- Signal end of options with '--'; subsequent arguments are treated
  as non-option arguments, even if they begin with '-'.
- Raise exception Zend_Console_Getopt_Exception in several cases
  when invalid flags or parameters are given.  Usage message is
  returned in the exception object.

The format for specifying options uses a PHP associative array.
The key is has the format of a list of pipe-separated flag names,
followed by an optional '=' to indicate a required parameter or
'-' to indicate an optional parameter.  Following that, the type
of parameter may be specified as 's' for string, 'w' for word,
or 'i' for integer.

Examples:
- 'user|username|u=s'  this means '--user' or '--username' or '-u'
  are synonyms, and the option requires a string parameter.
- 'p=i'  this means '-p' requires an integer parameter.  No synonyms.
- 'verbose|v-i'  this means '--verbose' or '-v' are synonyms, and
  they take an optional integer parameter.
- 'help|h'  this means '--help' or '-h' are synonyms, and
  they take no parameter.

The values in the associative array are strings that are used as
brief descriptions of the options when printing a usage message.

The simpler format for specifying options used by PHP's getopt()
function is also supported.  This is similar to GNU getopt and shell
getopt format.

Example:  'abc:' means options '-a', '-b', and '-c'
are legal, and the latter requires a string parameter.</pre>
          </p>
        </div>
        <ul class="fileinfos">e.g. if -b is specified, -a must be specified or else the
       usage is invalid.e.g. if -a is specified, run function 'handleOptionA'().</ul>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="MODE_ZEND"/>MODE_ZEND = 'zend'<em> </em><p><li>The options for a given application can be in multiple formats.<pre>modeGnu is for traditional 'ab:c:' style getopt format.
modeZend is for a more structured format.</pre></li></p><hr/></li>
          <li><a name="MODE_GNU"/>MODE_GNU = 'gnu'<hr/></li>
          <li><a name="PARAM_REQUIRED"/>PARAM_REQUIRED = '='<em> </em><p><li>Constant tokens for various symbols used in the mode_zend rule format.</li></p><hr/></li>
          <li><a name="PARAM_OPTIONAL"/>PARAM_OPTIONAL = '-'<hr/></li>
          <li><a name="TYPE_STRING"/>TYPE_STRING = 's'<hr/></li>
          <li><a name="TYPE_WORD"/>TYPE_WORD = 'w'<hr/></li>
          <li><a name="TYPE_INTEGER"/>TYPE_INTEGER = 'i'<hr/></li>
          <li><a name="TYPE_NUMERIC_FLAG"/>TYPE_NUMERIC_FLAG = '#'<hr/></li>
          <li><a name="CONFIG_RULEMODE"/>CONFIG_RULEMODE = 'ruleMode'<em> </em><p><li>These are constants for optional behavior of this class.<pre>ruleMode is either 'zend' or 'gnu' or a user-defined mode.
dashDash is true if '--' signifies the end of command-line options.
ignoreCase is true if '--opt' and '--OPT' are implicitly synonyms.
parseAll is true if all options on the command line should be parsed, regardless of
whether an argument appears before them.</pre></li></p><hr/></li>
          <li><a name="CONFIG_DASHDASH"/>CONFIG_DASHDASH = 'dashDash'<hr/></li>
          <li><a name="CONFIG_IGNORECASE"/>CONFIG_IGNORECASE = 'ignoreCase'<hr/></li>
          <li><a name="CONFIG_PARSEALL"/>CONFIG_PARSEALL = 'parseAll'<hr/></li>
          <li><a name="CONFIG_CUMULATIVE_PARAMETERS"/>CONFIG_CUMULATIVE_PARAMETERS = 'cumulativeParameters'<hr/></li>
          <li><a name="CONFIG_CUMULATIVE_FLAGS"/>CONFIG_CUMULATIVE_FLAGS = 'cumulativeFlags'<hr/></li>
          <li><a name="CONFIG_PARAMETER_SEPARATOR"/>CONFIG_PARAMETER_SEPARATOR = 'parameterSeparator'<hr/></li>
          <li><a name="CONFIG_FREEFORM_FLAGS"/>CONFIG_FREEFORM_FLAGS = 'freeformFlags'<hr/></li>
          <li><a name="CONFIG_NUMERIC_FLAGS"/>CONFIG_NUMERIC_FLAGS = 'numericFlags'<hr/></li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="getoptConfig"/>
            <h4><span class="label protected">protected</span>
                $getoptConfig</h4>
            <ul class="varlist">
              <li>Defaults for getopt configuration are: ruleMode is 'zend' format, dashDash (--) token is enabled, ignoreCase is not enabled, parseAll is enabled, cumulative parameters are disabled, this means that subsequent options overwrite the parameter value, cumulative flags are disable, freeform flags are disable.</li>
            </ul>
          </li>
          <li>
            <a name="argv"/>
            <h4><span class="label protected">protected</span>array 
                
                $argv</h4>
            <ul class="varlist">
              <li>Stores the command-line arguments for the calling application.</li>
            </ul>
          </li>
          <li>
            <a name="progname"/>
            <h4><span class="label protected">protected</span>string 
                
                $progname</h4>
            <ul class="varlist">
              <li>Stores the name of the calling application.</li>
            </ul>
          </li>
          <li>
            <a name="rules"/>
            <h4><span class="label protected">protected</span>array 
                
                $rules</h4>
            <ul class="varlist">
              <li>Stores the list of legal options for this application.</li>
            </ul>
          </li>
          <li>
            <a name="ruleMap"/>
            <h4><span class="label protected">protected</span>array 
                
                $ruleMap</h4>
            <ul class="varlist">
              <li>Stores alternate spellings of legal options.</li>
            </ul>
          </li>
          <li>
            <a name="options"/>
            <h4><span class="label protected">protected</span>array 
                
                $options</h4>
            <ul class="varlist">
              <li>Stores options given by the user in the current invocation of the application, as well as parameters given in options.</li>
            </ul>
          </li>
          <li>
            <a name="remainingArgs"/>
            <h4><span class="label protected">protected</span>array 
                
                $remainingArgs</h4>
            <ul class="varlist">
              <li>Stores the command-line arguments other than options.</li>
            </ul>
          </li>
          <li>
            <a name="parsed"/>
            <h4><span class="label protected">protected</span>boolean 
                
                $parsed</h4>
            <ul class="varlist">
              <li>State of the options: parsed or not yet parsed?</li>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">array</span><strong> $rules</strong>, <span class="param-type">array</span><strong> $argv</strong>, <span class="param-type">Array</span><strong> $getoptConfig</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>The constructor takes one to three parameters.<pre>The first parameter is $rules, which may be a string for
gnu-style format, or a structured array for Zend-style format.

The second parameter is $argv, and it is optional.  If not
specified, $argv is inferred from the global argv.

The third parameter is an array of configuration parameters
to control the behavior of this instance of Getopt; it is optional.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$rules</code> - </li>
                <li><code>$argv</code> - </li>
                <li><code>$getoptConfig</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__get"/>
            <h4><span class="label public">public</span>__get<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the state of the option seen on the command line of the current application invocation.  This function returns true, or the parameter to the option, if any.  If the option was not given, this function returns null.<pre>The magic __get method works in the context of naming the option
as a virtual member of this class.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__isset"/>
            <h4><span class="label public">public</span>__isset<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Test whether a given option has been seen.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__set"/>
            <h4><span class="label public">public</span>__set<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong>, <span class="param-type">string</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the value for a given option.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
                <li><code>$value</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__toString"/>
            <h4><span class="label public">public</span>__toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the current set of options and parameters seen as a string.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__unset"/>
            <h4><span class="label public">public</span>__unset<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Unset an option.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addArguments"/>
            <h4><span class="label public">public</span>addArguments<span style="font-size:90%;">( <span class="param-type">array</span><strong> $argv</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define additional command-line arguments.<pre>These are appended to those defined when the constructor was called.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$argv</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Console\Exception\InvalidArgumentException When not given an array as parameter</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addRules"/>
            <h4><span class="label public">public</span>addRules<span style="font-size:90%;">( <span class="param-type">array</span><strong> $rules</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define additional option rules.<pre>These are appended to the rules defined when the constructor was called.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$rules</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getArguments"/>
            <h4><span class="label public">public</span>getArguments<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="getOption"/>
            <h4><span class="label public">public</span>getOption<span style="font-size:90%;">( <span class="param-type">string</span><strong> $flag</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the state of the option seen on the command line of the current application invocation.<pre>This function returns true, or the parameter value to the option, if any.
If the option was not given, this function returns false.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$flag</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getOptions"/>
            <h4><span class="label public">public</span>getOptions<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return a list of options that have been seen in the current argv.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRemainingArgs"/>
            <h4><span class="label public">public</span>getRemainingArgs<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the arguments from the command-line following all options found.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getUsageMessage"/>
            <h4><span class="label public">public</span>getUsageMessage<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return a useful option reference, formatted for display in an error message.<pre>Note that this usage information is provided in most Exceptions
generated by this class.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parse"/>
            <h4><span class="label public">public</span>parse<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parse command-line arguments and find both long and short options.<pre>Also find option parameters, and remaining arguments after
all options have been parsed.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setAliases"/>
            <h4><span class="label public">public</span>setAliases<span style="font-size:90%;">( <span class="param-type">array</span><strong> $aliasMap</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define aliases for options.<pre>The parameter $aliasMap is an associative array
mapping option name (short or long) to an alias.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$aliasMap</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Console\Exception\ExceptionInterface</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setArguments"/>
            <h4><span class="label public">public</span>setArguments<span style="font-size:90%;">( <span class="param-type">array</span><strong> $argv</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define full set of command-line arguments.<pre>These replace any currently defined.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$argv</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Console\Exception\InvalidArgumentException When not given an array as parameter</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setHelp"/>
            <h4><span class="label public">public</span>setHelp<span style="font-size:90%;">( <span class="param-type">array</span><strong> $helpMap</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define help messages for options.<pre>The parameter $help_map is an associative array
mapping option name (short or long) to the help string.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$helpMap</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setOption"/>
            <h4><span class="label public">public</span>setOption<span style="font-size:90%;">( <span class="param-type">string</span><strong> $configKey</strong>, <span class="param-type">string</span><strong> $configValue</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define one configuration option as a key/value pair.<pre>These are not program options, but properties to configure
the behavior of Zend_Console_Getopt.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$configKey</code> - </li>
                <li><code>$configValue</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setOptions"/>
            <h4><span class="label public">public</span>setOptions<span style="font-size:90%;">( <span class="param-type">array</span><strong> $getoptConfig</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define multiple configuration options from an associative array.<pre>These are not program options, but properties to configure
the behavior of Zend_Console_Getopt.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$getoptConfig</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Provides a fluent interface</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="toArray"/>
            <h4><span class="label public">public</span>toArray<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the current set of options and parameters seen as an array of canonical options and parameters.<pre>Clusters have been expanded, and option aliases
have been mapped to their primary option names.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="toJson"/>
            <h4><span class="label public">public</span>toJson<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the current set of options and parameters seen in Json format.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="toString"/>
            <h4><span class="label public">public</span>toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the current set of options and parameters seen as a string.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="toXml"/>
            <h4><span class="label public">public</span>toXml<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the current set of options and parameters seen in XML format.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_addRulesModeGnu"/>
            <h4><span class="label protected">protected</span>_addRulesModeGnu<span style="font-size:90%;">( <span class="param-type">string</span><strong> $rules</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define legal options using the gnu-style format.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$rules</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_addRulesModeZend"/>
            <h4><span class="label protected">protected</span>_addRulesModeZend<span style="font-size:90%;">( <span class="param-type">array</span><strong> $rules</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Define legal options using the Zend-style format.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$rules</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Console\Exception\ExceptionInterface</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_checkParameterType"/>
            <h4><span class="label protected">protected</span>_checkParameterType<span style="font-size:90%;">( <span class="param-type">string</span><strong> $flag</strong>, <span class="param-type">string</span><strong> $param</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return true if the parameter is in a valid format for the option $flag.<pre>Throw an exception in most other cases.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$flag</code> - </li>
                <li><code>$param</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Console\Exception\ExceptionInterface</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_parseLongOption"/>
            <h4><span class="label protected">protected</span>_parseLongOption<span style="font-size:90%;">( <span class="param-type"/><strong> &amp;$argv</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parse command-line arguments for a single long option.<pre>A long option is preceded by a double '--' character.
Long options may not be clustered.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>&amp;$argv</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_parseShortOptionCluster"/>
            <h4><span class="label protected">protected</span>_parseShortOptionCluster<span style="font-size:90%;">( <span class="param-type"/><strong> &amp;$argv</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parse command-line arguments for short options.<pre>Short options are those preceded by a single '-' character.
Short options may be clustered.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>&amp;$argv</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_parseSingleOption"/>
            <h4><span class="label protected">protected</span>_parseSingleOption<span style="font-size:90%;">( <span class="param-type">string</span><strong> $flag</strong>, <span class="param-type">mixed</span><strong> &amp;$argv</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parse command-line arguments for a single option.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$flag</code> - </li>
                <li><code>$argv</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Console\Exception\ExceptionInterface</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_setBooleanFlagValue"/>
            <h4><span class="label protected">protected</span>_setBooleanFlagValue<span style="font-size:90%;">( <span class="param-type">string</span><strong> $flag</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set TRUE value to given flag, if this option does not exist yet In other case increase value to show count of flags' usage</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$flag</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_setNumericOptionValue"/>
            <h4><span class="label protected">protected</span>_setNumericOptionValue<span style="font-size:90%;">( <span class="param-type">int</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set given value as value of numeric option<pre>Throw runtime exception if this action is deny by configuration
or no one numeric option handlers is defined</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$value</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_setSingleOptionValue"/>
            <h4><span class="label protected">protected</span>_setSingleOptionValue<span style="font-size:90%;">( <span class="param-type">string</span><strong> $flag</strong>, <span class="param-type">string</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Add relative to options' flag value<pre>If options list already has current flag as key
and parser should follow cumulative params by configuration,
we should to add new param to array, not to overwrite</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$flag</code> - </li>
                <li><code>$value</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
