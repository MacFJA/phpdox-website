<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Soap\Server\DocumentLiteralWrapper - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#object">$object</a>
          </li>
          <li>
            <a href="#reflection">$reflection</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__call">__call</a>
          </li>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#_assertOnlyOneArgument">_assertOnlyOneArgument</a>
          </li>
          <li>
            <a href="#_assertServiceDelegateHasMethod">_assertServiceDelegateHasMethod</a>
          </li>
          <li>
            <a href="#_getResultMessage">_getResultMessage</a>
          </li>
          <li>
            <a href="#_parseArguments">_parseArguments</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Soap\Server\</span>DocumentLiteralWrapper</h2>
        <div class="file-notice">
          <p>Wraps WSDL Document/Literal Style service objects to hide SOAP request message abstraction from the actual service object.</p>
          <p>
            <pre>When using the document/literal SOAP message pattern you end up with one
object passed to your service methods that contains all the parameters of
the method. This obviously leads to a problem since Zend\Soap\Wsdl tightly
couples method parameters to request message parameters.

Example:

  class MyCalculatorService
  {
     /**
      * @param int $x
      * @param int $y
      * @return int
      *
     public function add($x, $y) {}
  }

The document/literal wrapper pattern would lead php ext/soap to generate a
single "request" object that contains $x and $y properties. To solve this a
wrapper service is needed that extracts the properties and delegates a
proper call to the underlying service.

The input variable from a document/literal SOAP-call to the client
MyCalculatorServiceClient#add(10, 20) would lead PHP ext/soap to create
the following request object:

$addRequest = new \stdClass;
$addRequest-&gt;x = 10;
$addRequest-&gt;y = 20;

This object does not match the signature of the server-side
MyCalculatorService and lead to failure.

Also the response object in this case is supposed to be an array
or object with a property "addResult":

$addResponse = new \stdClass;
$addResponse-&gt;addResult = 30;

To keep your service object code free from this implementation detail
of SOAP this wrapper service handles the parsing between the formats.</pre>
          </p>
        </div>
        <ul class="fileinfos">$service = new MyCalculatorService();
 $soap = new \Zend\Soap\Server($wsdlFile);
 $soap-&gt;setObject(new \Zend\Soap\Server\DocumentLiteralWrapper($service));
 $soap-&gt;handle();</ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="object"/>
            <h4><span class="label protected">protected</span>object 
                
                $object</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="reflection"/>
            <h4><span class="label protected">protected</span>object 
                
                $reflection</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> $object</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Pass Service object to the constructor</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$object</code> - </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__call"/>
            <h4><span class="label public">public</span>__call<span style="font-size:90%;">( <span class="param-type">string</span><strong> $method</strong>, <span class="param-type">array</span><strong> $args</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Proxy method that does the heavy document/literal decomposing.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$method</code> - </li>
                <li><code>$args</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_assertOnlyOneArgument"/>
            <h4><span class="label protected">protected</span>_assertOnlyOneArgument<span style="font-size:90%;">( <span class="param-type"/><strong> $args</strong> )</span></h4>
          </li>
          <li>
            <a name="_assertServiceDelegateHasMethod"/>
            <h4><span class="label protected">protected</span>_assertServiceDelegateHasMethod<span style="font-size:90%;">( <span class="param-type"/><strong> $method</strong> )</span></h4>
          </li>
          <li>
            <a name="_getResultMessage"/>
            <h4><span class="label protected">protected</span>_getResultMessage<span style="font-size:90%;">( <span class="param-type"/><strong> $method</strong>, <span class="param-type"/><strong> $ret</strong> )</span></h4>
          </li>
          <li>
            <a name="_parseArguments"/>
            <h4><span class="label protected">protected</span>_parseArguments<span style="font-size:90%;">( <span class="param-type">string</span><strong> $method</strong>, <span class="param-type">invalid method call</span><strong> $document</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parse the document/literal wrapper into arguments to call the real service.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$method</code> - </li>
                <li><code>$document</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>UnexpectedValueException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
