<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Math\Rand - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#getBoolean">getBoolean</a>
          </li>
          <li>
            <a href="#getBytes">getBytes</a>
          </li>
          <li>
            <a href="#getFloat">getFloat</a>
          </li>
          <li>
            <a href="#getInteger">getInteger</a>
          </li>
          <li>
            <a href="#getString">getString</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Math\</span>Rand</h2>
        <div class="file-notice">
          <p>Pseudorandom number generator (PRNG)</p>
        </div>
        <ul class="fileinfos"/>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="getBoolean"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getBoolean<span style="font-size:90%;">( <span class="param-type">boolean</span><strong> $strong</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Generate random boolean</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$strong</code> - true if you need a strong random generator (cryptography)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getBytes"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getBytes<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $length</strong>, <span class="param-type">boolean</span><strong> $strong</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Generate random bytes using OpenSSL or Mcrypt and mt_rand() as fallback</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$length</code> - </li>
                <li><code>$strong</code> - true if you need a strong random generator (cryptography)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFloat"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getFloat<span style="font-size:90%;">( <span class="param-type">boolean</span><strong> $strong</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Generate random float (0..1) This function generates floats with platform-dependent precision<pre>PHP uses double precision floating-point format (64-bit) which has
52-bits of significand precision. We gather 7 bytes of random data,
and we fix the exponent to the bias (1023). In this way we generate
a float of 1.mantissa.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$strong</code> - true if you need a strong random generator (cryptography)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getInteger"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getInteger<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $min</strong>, <span class="param-type">integer</span><strong> $max</strong>, <span class="param-type">boolean</span><strong> $strong</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Generate a random integer between $min and $max</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$min</code> - </li>
                <li><code>$max</code> - </li>
                <li><code>$strong</code> - true if you need a strong random generator (cryptography)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\DomainException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getString"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getString<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $length</strong>, <span class="param-type"><span title="string|null">string|null</span></span><strong> $charlist</strong>, <span class="param-type">boolean</span><strong> $strong</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Generate a random string of specified length.<pre>Uses supplied character list for generating the new string.
If no character list provided - uses Base 64 character set.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$length</code> - </li>
                <li><code>$charlist</code> - </li>
                <li><code>$strong</code> - true if you need a strong random generator (cryptography)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\DomainException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
