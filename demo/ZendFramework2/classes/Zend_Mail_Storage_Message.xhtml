<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Mail\Storage\Message - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#flags">$flags</a>
          </li>
          <li>
            <a href="#headers">$headers</a>
          </li>
          <li>
            <a href="#content">$content</a>
          </li>
          <li>
            <a href="#topLines">$topLines</a>
          </li>
          <li>
            <a href="#parts">$parts</a>
          </li>
          <li>
            <a href="#countParts">$countParts</a>
          </li>
          <li>
            <a href="#iterationPos">$iterationPos</a>
          </li>
          <li>
            <a href="#mail">$mail</a>
          </li>
          <li>
            <a href="#messageNum">$messageNum</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__get">__get</a>
          </li>
          <li>
            <a href="#__isset">__isset</a>
          </li>
          <li>
            <a href="#__toString">__toString</a>
          </li>
          <li>
            <a href="#_cacheContent">_cacheContent</a>
          </li>
          <li>
            <a href="#countParts">countParts</a>
          </li>
          <li>
            <a href="#current">current</a>
          </li>
          <li>
            <a href="#getChildren">getChildren</a>
          </li>
          <li>
            <a href="#getContent">getContent</a>
          </li>
          <li>
            <a href="#getFlags">getFlags</a>
          </li>
          <li>
            <a href="#getHeader">getHeader</a>
          </li>
          <li>
            <a href="#getHeaderField">getHeaderField</a>
          </li>
          <li>
            <a href="#getHeaders">getHeaders</a>
          </li>
          <li>
            <a href="#getPart">getPart</a>
          </li>
          <li>
            <a href="#getSize">getSize</a>
          </li>
          <li>
            <a href="#getTopLines">getTopLines</a>
          </li>
          <li>
            <a href="#hasChildren">hasChildren</a>
          </li>
          <li>
            <a href="#hasFlag">hasFlag</a>
          </li>
          <li>
            <a href="#isMultipart">isMultipart</a>
          </li>
          <li>
            <a href="#key">key</a>
          </li>
          <li>
            <a href="#next">next</a>
          </li>
          <li>
            <a href="#rewind">rewind</a>
          </li>
          <li>
            <a href="#valid">valid</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Mail\Storage\</span>Message</h2>
        <div class="file-notice">
          <p/>
        </div>
        <ul class="fileinfos"/>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Zend_Mail_Storage_Message_MessageInterface.xhtml">Zend\Mail\Storage\Message\MessageInterface</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="flags"/>
            <h4><span class="label protected">protected</span>array 
                
                $flags</h4>
            <ul class="varlist">
              <li>flags for this message</li>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $params</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Public constructor<pre>In addition to the parameters of Part::__construct() this constructor supports:
- file  filename or file handle of a file with raw message content
- flags array with flags for message, keys are ignored, use constants defined in \Zend\Mail\Storage</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$params</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__get"/>
            <h4><span class="label public">public</span>__get<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Getter for mail headers - name is matched in lowercase<pre>This getter is short for Part::getHeader($name, 'string')</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - header name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>value of header</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\ExceptionInterface</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__isset"/>
            <h4><span class="label public">public</span>__isset<span style="font-size:90%;">( <span class="param-type"/><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Isset magic method proxy to hasHeader<pre>This method is short syntax for Part::hasHeader($name);</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code/> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__toString"/>
            <h4><span class="label public">public</span>__toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>magic method to get content of part</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>content</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="countParts"/>
            <h4><span class="label public">public</span>countParts<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Count parts of a multipart part</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>number of sub-parts</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="current"/>
            <h4><span class="label public">public</span>current<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>implements Iterator::current()</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>current part</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getChildren"/>
            <h4><span class="label public">public</span>getChildren<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>implements RecursiveIterator::getChildren()</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>same as self::current()</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getContent"/>
            <h4><span class="label public">public</span>getContent<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Body of part<pre>If part is multipart the raw content of this part with all sub parts is returned</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>body</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFlags"/>
            <h4><span class="label public">public</span>getFlags<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>get all set flags</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>array with flags, key and value are the same for easy lookup</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHeader"/>
            <h4><span class="label public">public</span>getHeader<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $format</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get a header in specified format<pre>Internally headers that occur more than once are saved as array, all other as string. If $format
is set to string implode is used to concat the values (with Mime::LINEEND as delim).</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - name of header, matches case-insensitive, but camel-case is replaced with dashes</li>
                <li><code>$format</code> - change type of return value to 'string' or 'array'</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>value of header in wanted or internal format</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHeaderField"/>
            <h4><span class="label public">public</span>getHeaderField<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $wantedPart</strong>, <span class="param-type">string</span><strong> $firstName</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get a specific field from a header like content type or all fields as array<pre>If the header occurs more than once, only the value from the first header
is returned.

Throws an Exception if the requested header does not exist. If
the specific header field does not exist, returns null.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - name of header, like in getHeader()</li>
                <li><code>$wantedPart</code> - the wanted part, default is first, if null an array with all parts is returned</li>
                <li><code>$firstName</code> - key name for the first part</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>wanted part or all parts as array($firstName =&gt; firstPart, partname =&gt; value)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Mime\Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHeaders"/>
            <h4><span class="label public">public</span>getHeaders<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Access headers collection<pre>Lazy-loads if not already attached.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPart"/>
            <h4><span class="label public">public</span>getPart<span style="font-size:90%;">( <span class="param-type">int</span><strong> $num</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get part of multipart message</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$num</code> - number of part starting with 1 for first part</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>wanted part</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getSize"/>
            <h4><span class="label public">public</span>getSize<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return size of part<pre>Quite simple implemented currently (not decoding). Handle with care.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>size</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTopLines"/>
            <h4><span class="label public">public</span>getTopLines<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>return toplines as found after headers</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>toplines</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasChildren"/>
            <h4><span class="label public">public</span>hasChildren<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>implements RecursiveIterator::hasChildren()</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>current element has children/is multipart</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasFlag"/>
            <h4><span class="label public">public</span>hasFlag<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $flag</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>check if flag is set</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$flag</code> - a flag name, use constants defined in \Zend\Mail\Storage</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if set, otherwise false</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isMultipart"/>
            <h4><span class="label public">public</span>isMultipart<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check if part is a multipart message</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>if part is multipart</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="key"/>
            <h4><span class="label public">public</span>key<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>implements Iterator::key()</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>key/number of current part</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="next"/>
            <h4><span class="label public">public</span>next<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>implements Iterator::next()</li>
            </p>
          </li>
          <li>
            <a name="rewind"/>
            <h4><span class="label public">public</span>rewind<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>implements Iterator::rewind()</li>
            </p>
          </li>
          <li>
            <a name="valid"/>
            <h4><span class="label public">public</span>valid<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>implements Iterator::valid()</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>check if there's a current element</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_cacheContent"/>
            <h4><span class="label protected">protected</span>_cacheContent<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Cache content and split in parts if multipart</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
