<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Json\Json - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#TYPE_ARRAY">TYPE_ARRAY</a>
          </li>
          <li>
            <a href="#TYPE_OBJECT">TYPE_OBJECT</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#maxRecursionDepthAllowed">$maxRecursionDepthAllowed</a>
          </li>
          <li>
            <a href="#useBuiltinEncoderDecoder">$useBuiltinEncoderDecoder</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#_getXmlValue">_getXmlValue</a>
          </li>
          <li>
            <a href="#_processXml">_processXml</a>
          </li>
          <li>
            <a href="#_recursiveJsonExprFinder">_recursiveJsonExprFinder</a>
          </li>
          <li>
            <a href="#decode">decode</a>
          </li>
          <li>
            <a href="#encode">encode</a>
          </li>
          <li>
            <a href="#fromXml">fromXml</a>
          </li>
          <li>
            <a href="#prettyPrint">prettyPrint</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Json\</span>Json</h2>
        <div class="file-notice">
          <p>Class for encoding to and decoding from JSON.</p>
        </div>
        <ul class="fileinfos"/>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="TYPE_ARRAY"/>TYPE_ARRAY = 1<em> </em><p><li>How objects should be encoded -- arrays or as StdClass. TYPE_ARRAY is 1 so that it is a boolean true value, allowing it to be used with ext/json's functions.</li></p><hr/></li>
          <li><a name="TYPE_OBJECT"/>TYPE_OBJECT = 0<hr/></li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="maxRecursionDepthAllowed"/>
            <h4><span class="label public">public</span>int 
                
                $maxRecursionDepthAllowed</h4>
            <ul class="varlist">
              <li>To check the allowed nesting depth of the XML tree during xml2json conversion.</li>
            </ul>
          </li>
          <li>
            <a name="useBuiltinEncoderDecoder"/>
            <h4><span class="label public">public</span>object 
                
                $useBuiltinEncoderDecoder</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="decode"/>
            <h4><span class="label true">true</span><span class="label public">public</span>decode<span style="font-size:90%;">( <span class="param-type">string</span><strong> $encodedValue</strong>, <span class="param-type">int</span><strong> $objectDecodeType</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Decodes the given $encodedValue string which is encoded in the JSON format<pre>Uses ext/json's json_decode if available.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$encodedValue</code> - Encoded in JSON format</li>
                <li><code>$objectDecodeType</code> - Optional; flag indicating how to decode</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="encode"/>
            <h4><span class="label true">true</span><span class="label public">public</span>encode<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $valueToEncode</strong>, <span class="param-type">boolean</span><strong> $cycleCheck</strong>, <span class="param-type">Array</span><strong> $options</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Encode the mixed $valueToEncode into the JSON format<pre>Encodes using ext/json's json_encode() if available.

NOTE: Object should not contain cycles; the JSON format
does not allow object reference.

NOTE: Only public variables will be encoded

NOTE: Encoding native javascript expressions are possible using Zend_Json_Expr.
      You can enable this by setting $options['enableJsonExprFinder'] = true</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$valueToEncode</code> - </li>
                <li><code>$cycleCheck</code> - Optional; whether or not to check for object recursion; off by default</li>
                <li><code>$options</code> - Additional options used during encoding</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>JSON encoded object</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="fromXml"/>
            <h4><span class="label true">true</span><span class="label public">public</span>fromXml<span style="font-size:90%;">( <span class="param-type">string</span><strong> $xmlStringContents</strong>, <span class="param-type">boolean</span><strong> $ignoreXmlAttributes</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>fromXml - Converts XML to JSON<pre>Converts a XML formatted string into a JSON formatted string.
The value returned will be a string in JSON format.

The caller of this function needs to provide only the first parameter,
which is an XML formatted String. The second parameter is optional, which
lets the user to select if the XML attributes in the input XML string
should be included or ignored in xml2json conversion.

This function converts the XML formatted string into a PHP array by
calling a recursive (protected static) function in this class. Then, it
converts that PHP array into JSON by calling the "encode" static function.

NOTE: Encoding native javascript expressions via Zend_Json_Expr is not possible.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$xmlStringContents</code> - XML String to be converted</li>
                <li><code>$ignoreXmlAttributes</code> - Include or exclude XML attributes in</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>- JSON formatted string on success</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Zend\Json\Exception\RuntimeException if the input not a XML formatted string</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="prettyPrint"/>
            <h4><span class="label true">true</span><span class="label public">public</span>prettyPrint<span style="font-size:90%;">( <span class="param-type">string</span><strong> $json</strong>, <span class="param-type">Array</span><strong> $options</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Pretty-print JSON string<pre>Use 'indent' option to select indentation string - by default it's a tab</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$json</code> - Original JSON string</li>
                <li><code>$options</code> - Encoding options</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_getXmlValue"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>_getXmlValue<span style="font-size:90%;">( <span class="param-type"><span title="SimpleXMLElement">SimpleXMLElement</span></span><strong> $simpleXmlElementObject</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the value of an XML attribute text or the text between the XML tags<pre>In order to allow Zend_Json_Expr from xml, we check if the node
matches the pattern that try to detect if it is a new Zend_Json_Expr
if it matches, we return a new Zend_Json_Expr instead of a text node</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$simpleXmlElementObject</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_processXml"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>_processXml<span style="font-size:90%;">( <span class="param-type"><span title="SimpleXMLElement">SimpleXMLElement</span></span><strong> $simpleXmlElementObject</strong>, <span class="param-type">boolean</span><strong> $ignoreXmlAttributes</strong>, <span class="param-type">integer</span><strong> $recursionDepth</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>_processXml - Contains the logic for xml2json<pre>The logic in this function is a recursive one.

The main caller of this function (i.e. fromXml) needs to provide
only the first two parameters i.e. the SimpleXMLElement object and
the flag for ignoring or not ignoring XML attributes. The third parameter
will be used internally within this function during the recursive calls.

This function converts the SimpleXMLElement object into a PHP array by
calling a recursive (protected static) function in this class. Once all
the XML elements are stored in the PHP array, it is returned to the caller.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$simpleXmlElementObject</code> - </li>
                <li><code>$ignoreXmlAttributes</code> - </li>
                <li><code>$recursionDepth</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RecursionException if the XML tree is deeper than the allowed limit.</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_recursiveJsonExprFinder"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>_recursiveJsonExprFinder<span style="font-size:90%;">( <span class="param-type"/><strong> &amp;$value</strong>, <span class="param-type">Array</span><strong> &amp;$javascriptExpressions</strong>, <span class="param-type"/><strong> $currentKey</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Check &amp; Replace Zend_Json_Expr for tmp ids in the valueToEncode<pre>Check if the value is a Zend_Json_Expr, and if replace its value
with a magic key and save the javascript expression in an array.

NOTE this method is recursive.

NOTE: This method is used internally by the encode method.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$valueToCheck</code> - a string - object property to be encoded</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
