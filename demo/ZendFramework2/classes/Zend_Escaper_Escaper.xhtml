<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - Zend\Escaper\Escaper</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml#Zend_Escaper">Zend\Escaper</a>
          </li>
          <li class="separator">Escaper</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/Escaper/Escaper.php.xhtml#line16">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>Zend\Escaper\</small>Escaper</h1>
        <h4>Context specific methods for use in secure output escaping</h4>
        <p/>
        <ul/>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class Escaper
            {<br/><ul class="none"><li>// members</li><li>protected array <a href="#members">$htmlNamedEntityMap</a>;
                    </li><li>protected string <a href="#members">$encoding</a>;
                    </li><li>protected string <a href="#members">$htmlSpecialCharsFlags</a>;
                    </li><li>protected <span title="Zend\Escaper\callable">callable</span> <a href="#members">$htmlAttrMatcher</a>;
                    </li><li>protected <span title="Zend\Escaper\callable">callable</span> <a href="#members">$jsMatcher</a>;
                    </li><li>protected <span title="Zend\Escaper\callable">callable</span> <a href="#members">$cssMatcher</a>;
                    </li><li>protected array <a href="#members">$supportedEncodings</a>;
                    </li></ul><ul class="none"><li>// methods</li><li>public void <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/__construct.xhtml">__construct</a>()
                    </li><li>public string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/getEncoding.xhtml">getEncoding</a>()
                    </li><li>public string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeHtml.xhtml">escapeHtml</a>()
                    </li><li>public string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeHtmlAttr.xhtml">escapeHtmlAttr</a>()
                    </li><li>public string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeJs.xhtml">escapeJs</a>()
                    </li><li>public string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeUrl.xhtml">escapeUrl</a>()
                    </li><li>public string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeCss.xhtml">escapeCss</a>()
                    </li><li>protected string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/htmlAttrMatcher.xhtml">htmlAttrMatcher</a>()
                    </li><li>protected string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/jsMatcher.xhtml">jsMatcher</a>()
                    </li><li>protected string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/cssMatcher.xhtml">cssMatcher</a>()
                    </li><li>protected string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/toUtf8.xhtml">toUtf8</a>()
                    </li><li>protected string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/fromUtf8.xhtml">fromUtf8</a>()
                    </li><li>protected bool <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/isUtf8.xhtml">isUtf8</a>()
                    </li><li>protected string <a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/convertEncoding.xhtml">convertEncoding</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>protected</h4>
          <ul class="members">
            <li id="cssMatcher"><strong>$cssMatcher</strong>
                —
                <a href="#">Zend\Escaper\callable</a><br/><span class="indent">Static Matcher which escapes characters for CSS Attribute contexts</span></li>
            <li id="encoding"><strong>$encoding</strong>
                —
                string<br/><span class="indent">Current encoding for escaping. If not UTF-8, we convert strings from this encoding pre-escaping and back to this encoding post-escaping.</span></li>
            <li id="htmlAttrMatcher"><strong>$htmlAttrMatcher</strong>
                —
                <a href="#">Zend\Escaper\callable</a><br/><span class="indent">Static Matcher which escapes characters for HTML Attribute contexts</span></li>
            <li id="htmlNamedEntityMap"><strong>$htmlNamedEntityMap</strong>
                —
                array<br/><span class="indent">Entity Map mapping Unicode codepoints to any available named HTML entities.</span></li>
            <li id="htmlSpecialCharsFlags"><strong>$htmlSpecialCharsFlags</strong>
                —
                string<br/><span class="indent">Holds the value of the special flags passed as second parameter to htmlspecialchars(). We modify these for PHP 5.4 to take advantage of the new ENT_SUBSTITUTE flag for correctly dealing with invalid UTF-8 sequences.</span></li>
            <li id="jsMatcher"><strong>$jsMatcher</strong>
                —
                <a href="#">Zend\Escaper\callable</a><br/><span class="indent">Static Matcher which escapes characters for Javascript contexts</span></li>
            <li id="supportedEncodings"><strong>$supportedEncodings</strong>
                —
                array<br/><span class="indent">List of all encoding supported by this class</span></li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>protected</h4>
          <ul>
            <li id="convertEncoding"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/convertEncoding.xhtml">convertEncoding()</a>
                — Encoding conversion helper which wraps iconv and mbstring where they exist or throws and exception where neither is available.</li>
            <li id="cssMatcher"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/cssMatcher.xhtml">cssMatcher()</a>
                — Callback function for preg_replace_callback that applies CSS escaping to all matches.</li>
            <li id="fromUtf8"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/fromUtf8.xhtml">fromUtf8()</a>
                — Converts a string from UTF-8 to the base encoding. The base encoding is set via this class' constructor.</li>
            <li id="htmlAttrMatcher"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/htmlAttrMatcher.xhtml">htmlAttrMatcher()</a>
                — Callback function for preg_replace_callback that applies HTML Attribute escaping to all matches.</li>
            <li id="isUtf8"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/isUtf8.xhtml">isUtf8()</a>
                — Checks if a given string appears to be valid UTF-8 or not.</li>
            <li id="jsMatcher"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/jsMatcher.xhtml">jsMatcher()</a>
                — Callback function for preg_replace_callback that applies Javascript escaping to all matches.</li>
            <li id="toUtf8"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/toUtf8.xhtml">toUtf8()</a>
                — Converts a string to UTF-8 from the base encoding. The base encoding is set via this class' constructor.</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/__construct.xhtml">__construct()</a>
                — Constructor: Single parameter allows setting of global encoding for use by the current object. If PHP 5.4 is detected, additional ENT_SUBSTITUTE flag is set for htmlspecialchars() calls.</li>
            <li id="escapeCss"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeCss.xhtml">escapeCss()</a>
                — Escape a string for the CSS context. CSS escaping can be applied to any string being inserted into CSS and escapes everything except alphanumerics.</li>
            <li id="escapeHtml"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeHtml.xhtml">escapeHtml()</a>
                — Escape a string for the HTML Body context where there are very few characters of special meaning. Internally this will use htmlspecialchars().</li>
            <li id="escapeHtmlAttr"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeHtmlAttr.xhtml">escapeHtmlAttr()</a>
                — Escape a string for the HTML Attribute context. We use an extended set of characters to escape that are not covered by htmlspecialchars() to cover cases where an attribute might be unquoted or quoted illegally (e.g. backticks are valid quotes for IE).</li>
            <li id="escapeJs"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeJs.xhtml">escapeJs()</a>
                — Escape a string for the Javascript context. This does not use json_encode(). An extended set of characters are escaped beyond ECMAScript's rules for Javascript literal string escaping in order to prevent misinterpretation of Javascript as HTML leading to the injection of special characters and entities. The escaping used should be tolerant of cases where HTML escaping was not applied on top of Javascript escaping correctly.</li>
            <li id="escapeUrl"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/escapeUrl.xhtml">escapeUrl()</a>
                — Escape a string for the URI or Parameter contexts. This should not be used to escape an entire URI - only a subcomponent being inserted. The function is a simple proxy to rawurlencode() which now implements RFC 3986 since PHP 5.3 completely.</li>
            <li id="getEncoding"><a title="Zend\Escaper\Escaper" href="../classes/Zend_Escaper_Escaper/getEncoding.xhtml">getEncoding()</a>
                — Return the encoding that all output/input is expected to be encoded in.</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
