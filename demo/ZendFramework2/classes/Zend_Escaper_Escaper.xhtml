<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Escaper\Escaper - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#htmlNamedEntityMap">$htmlNamedEntityMap</a>
          </li>
          <li>
            <a href="#encoding">$encoding</a>
          </li>
          <li>
            <a href="#htmlSpecialCharsFlags">$htmlSpecialCharsFlags</a>
          </li>
          <li>
            <a href="#htmlAttrMatcher">$htmlAttrMatcher</a>
          </li>
          <li>
            <a href="#jsMatcher">$jsMatcher</a>
          </li>
          <li>
            <a href="#cssMatcher">$cssMatcher</a>
          </li>
          <li>
            <a href="#supportedEncodings">$supportedEncodings</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#convertEncoding">convertEncoding</a>
          </li>
          <li>
            <a href="#cssMatcher">cssMatcher</a>
          </li>
          <li>
            <a href="#escapeCss">escapeCss</a>
          </li>
          <li>
            <a href="#escapeHtml">escapeHtml</a>
          </li>
          <li>
            <a href="#escapeHtmlAttr">escapeHtmlAttr</a>
          </li>
          <li>
            <a href="#escapeJs">escapeJs</a>
          </li>
          <li>
            <a href="#escapeUrl">escapeUrl</a>
          </li>
          <li>
            <a href="#fromUtf8">fromUtf8</a>
          </li>
          <li>
            <a href="#getEncoding">getEncoding</a>
          </li>
          <li>
            <a href="#htmlAttrMatcher">htmlAttrMatcher</a>
          </li>
          <li>
            <a href="#isUtf8">isUtf8</a>
          </li>
          <li>
            <a href="#jsMatcher">jsMatcher</a>
          </li>
          <li>
            <a href="#toUtf8">toUtf8</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Escaper\</span>Escaper</h2>
        <div class="file-notice">
          <p>Context specific methods for use in secure output escaping</p>
        </div>
        <ul class="fileinfos"/>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="htmlNamedEntityMap"/>
            <h4><span class="label protected">protected</span>array 
                
                $htmlNamedEntityMap</h4>
            <ul class="varlist">
              <li>Entity Map mapping Unicode codepoints to any available named HTML entities.<pre>While HTML supports far more named entities, the lowest common denominator
has become HTML5's XML Serialisation which is restricted to the those named
entities that XML supports. Using HTML entities would result in this error:
    XML Parsing Error: undefined entity</pre></li>
            </ul>
          </li>
          <li>
            <a name="encoding"/>
            <h4><span class="label protected">protected</span>string 
                
                $encoding</h4>
            <ul class="varlist">
              <li>Current encoding for escaping. If not UTF-8, we convert strings from this encoding pre-escaping and back to this encoding post-escaping.</li>
            </ul>
          </li>
          <li>
            <a name="htmlSpecialCharsFlags"/>
            <h4><span class="label protected">protected</span>string 
                
                $htmlSpecialCharsFlags</h4>
            <ul class="varlist">
              <li>Holds the value of the special flags passed as second parameter to htmlspecialchars(). We modify these for PHP 5.4 to take advantage of the new ENT_SUBSTITUTE flag for correctly dealing with invalid UTF-8 sequences.</li>
            </ul>
          </li>
          <li>
            <a name="htmlAttrMatcher"/>
            <h4><span class="label protected">protected</span>object 
                
                $htmlAttrMatcher</h4>
            <ul class="varlist">
              <li>Static Matcher which escapes characters for HTML Attribute contexts</li>
            </ul>
          </li>
          <li>
            <a name="jsMatcher"/>
            <h4><span class="label protected">protected</span>object 
                
                $jsMatcher</h4>
            <ul class="varlist">
              <li>Static Matcher which escapes characters for Javascript contexts</li>
            </ul>
          </li>
          <li>
            <a name="cssMatcher"/>
            <h4><span class="label protected">protected</span>object 
                
                $cssMatcher</h4>
            <ul class="varlist">
              <li>Static Matcher which escapes characters for CSS Attribute contexts</li>
            </ul>
          </li>
          <li>
            <a name="supportedEncodings"/>
            <h4><span class="label protected">protected</span>array 
                
                $supportedEncodings</h4>
            <ul class="varlist">
              <li>List of all encoding supported by this class</li>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">string</span><strong> $encoding</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor: Single parameter allows setting of global encoding for use by the current object. If PHP 5.4 is detected, additional ENT_SUBSTITUTE flag is set for htmlspecialchars() calls.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$encoding</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="escapeCss"/>
            <h4><span class="label public">public</span>escapeCss<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Escape a string for the CSS context. CSS escaping can be applied to any string being inserted into CSS and escapes everything except alphanumerics.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="escapeHtml"/>
            <h4><span class="label public">public</span>escapeHtml<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Escape a string for the HTML Body context where there are very few characters of special meaning. Internally this will use htmlspecialchars().</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="escapeHtmlAttr"/>
            <h4><span class="label public">public</span>escapeHtmlAttr<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Escape a string for the HTML Attribute context. We use an extended set of characters to escape that are not covered by htmlspecialchars() to cover cases where an attribute might be unquoted or quoted illegally (e.g. backticks are valid quotes for IE).</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="escapeJs"/>
            <h4><span class="label public">public</span>escapeJs<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Escape a string for the Javascript context. This does not use json_encode(). An extended set of characters are escaped beyond ECMAScript's rules for Javascript literal string escaping in order to prevent misinterpretation of Javascript as HTML leading to the injection of special characters and entities. The escaping used should be tolerant of cases where HTML escaping was not applied on top of Javascript escaping correctly.<pre>Backslash escaping is not used as it still leaves the escaped character as-is and so
is not useful in a HTML context.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="escapeUrl"/>
            <h4><span class="label public">public</span>escapeUrl<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Escape a string for the URI or Parameter contexts. This should not be used to escape an entire URI - only a subcomponent being inserted. The function is a simple proxy to rawurlencode() which now implements RFC 3986 since PHP 5.3 completely.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEncoding"/>
            <h4><span class="label public">public</span>getEncoding<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return the encoding that all output/input is expected to be encoded in.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="convertEncoding"/>
            <h4><span class="label protected">protected</span>convertEncoding<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong>, <span class="param-type">string</span><strong> $to</strong>, <span class="param-type"><span title="array|string">array|string</span></span><strong> $from</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Encoding conversion helper which wraps iconv and mbstring where they exist or throws and exception where neither is available.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
                <li><code>$to</code> - </li>
                <li><code>$from</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="cssMatcher"/>
            <h4><span class="label protected">protected</span>cssMatcher<span style="font-size:90%;">( <span class="param-type">array</span><strong> $matches</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Callback function for preg_replace_callback that applies CSS escaping to all matches.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$matches</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="fromUtf8"/>
            <h4><span class="label protected">protected</span>fromUtf8<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Converts a string from UTF-8 to the base encoding. The base encoding is set via this class' constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="htmlAttrMatcher"/>
            <h4><span class="label protected">protected</span>htmlAttrMatcher<span style="font-size:90%;">( <span class="param-type">array</span><strong> $matches</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Callback function for preg_replace_callback that applies HTML Attribute escaping to all matches.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$matches</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isUtf8"/>
            <h4><span class="label protected">protected</span>isUtf8<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if a given string appears to be valid UTF-8 or not.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="jsMatcher"/>
            <h4><span class="label protected">protected</span>jsMatcher<span style="font-size:90%;">( <span class="param-type">array</span><strong> $matches</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Callback function for preg_replace_callback that applies Javascript escaping to all matches.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$matches</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="toUtf8"/>
            <h4><span class="label protected">protected</span>toUtf8<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Converts a string to UTF-8 from the base encoding. The base encoding is set via this class' constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\RuntimeException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
