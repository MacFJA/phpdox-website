<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Memory\Container\AccessController - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#memContainer">$memContainer</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__destruct">__destruct</a>
          </li>
          <li>
            <a href="#__get">__get</a>
          </li>
          <li>
            <a href="#__set">__set</a>
          </li>
          <li>
            <a href="#getRef">getRef</a>
          </li>
          <li>
            <a href="#isLocked">isLocked</a>
          </li>
          <li>
            <a href="#lock">lock</a>
          </li>
          <li>
            <a href="#touch">touch</a>
          </li>
          <li>
            <a href="#unlock">unlock</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Memory\Container\</span>AccessController</h2>
        <div class="file-notice">
          <p>Memory object container access controller.</p>
          <p>
            <pre>Memory manager stores a list of generated objects to control them.
So container objects always have at least one reference and can't be automatically destroyed.

This class is intended to be an userland proxy to memory container object.
It's not referenced by memory manager and class destructor is invoked immediately after going
out of scope or unset operation.

Class also provides Zend\Memory\Container interface and works as proxy for such cases.</pre>
          </p>
        </div>
        <ul class="fileinfos"/>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Zend_Memory_Container_ContainerInterface.xhtml">Zend\Memory\Container\ContainerInterface</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="memContainer"/>
            <h4><span class="label private">private</span>object 
                
                $memContainer</h4>
            <ul class="varlist">
              <li>Memory container object</li>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Zend_Memory_Container_Movable.xhtml">Zend\Memory\Container\Movable</a></span><strong> $memContainer</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Object constructor</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$memContainer</code> - </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Destructor</h3>
        <ul class="varlist">
          <li>
            <a name="__destruct"/>
            <h4><span class="label public">public</span>__destruct<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Object destructor</li>
            </p>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__get"/>
            <h4><span class="label public">public</span>__get<span style="font-size:90%;">( <span class="param-type">string</span><strong> $property</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get handler<pre>Loads object if necessary and moves it to the top of loaded objects list.
Swaps objects from the bottom of loaded objects list, if necessary.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$property</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__set"/>
            <h4><span class="label public">public</span>__set<span style="font-size:90%;">( <span class="param-type">string</span><strong> $property</strong>, <span class="param-type">string</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set handler</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$property</code> - </li>
                <li><code>$value</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRef"/>
            <h4><span class="label public">public</span>getRef<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get string value reference<pre>_Must_ be used for value access before PHP v 5.2
or _may_ be used for performance considerations</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isLocked"/>
            <h4><span class="label public">public</span>isLocked<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Return true if object is locked</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="lock"/>
            <h4><span class="label public">public</span>lock<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Lock object in memory.</li>
            </p>
          </li>
          <li>
            <a name="touch"/>
            <h4><span class="label public">public</span>touch<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Signal, that value is updated by external code.<pre>Should be used together with getRef()</pre></li>
            </p>
          </li>
          <li>
            <a name="unlock"/>
            <h4><span class="label public">public</span>unlock<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Unlock object</li>
            </p>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
