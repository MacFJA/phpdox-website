<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>zf - Zend\Form\Factory - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">zf - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#inputFilterFactory">$inputFilterFactory</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#create">create</a>
          </li>
          <li>
            <a href="#createElement">createElement</a>
          </li>
          <li>
            <a href="#createFieldset">createFieldset</a>
          </li>
          <li>
            <a href="#createForm">createForm</a>
          </li>
          <li>
            <a href="#getInputFilterFactory">getInputFilterFactory</a>
          </li>
          <li>
            <a href="#isSubclassOf">isSubclassOf</a>
          </li>
          <li>
            <a href="#prepareAndInjectElements">prepareAndInjectElements</a>
          </li>
          <li>
            <a href="#prepareAndInjectFieldsets">prepareAndInjectFieldsets</a>
          </li>
          <li>
            <a href="#prepareAndInjectHydrator">prepareAndInjectHydrator</a>
          </li>
          <li>
            <a href="#prepareAndInjectInputFilter">prepareAndInjectInputFilter</a>
          </li>
          <li>
            <a href="#prepareAndInjectObject">prepareAndInjectObject</a>
          </li>
          <li>
            <a href="#prepareAndInjectValidationGroup">prepareAndInjectValidationGroup</a>
          </li>
          <li>
            <a href="#setInputFilterFactory">setInputFilterFactory</a>
          </li>
          <li>
            <a href="#validateSpecification">validateSpecification</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Zend\Form\</span>Factory</h2>
        <div class="file-notice">
          <p/>
        </div>
        <ul class="fileinfos"/>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="inputFilterFactory"/>
            <h4><span class="label protected">protected</span>object 
                
                $inputFilterFactory</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="create"/>
            <h4><span class="label public">public</span>create<span style="font-size:90%;">( <span class="param-type"><span title="array|Traversable">array|Traversable</span></span><strong> $spec</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create an element, fieldset, or form<pre>Introspects the 'type' key of the provided $spec, and determines what
type is being requested; if none is provided, assumes the spec
represents simply an element.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$spec</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\DomainException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="createElement"/>
            <h4><span class="label public">public</span>createElement<span style="font-size:90%;">( <span class="param-type"><span title="array|Traversable|ArrayAccess">array|Traversable|ArrayAccess</span></span><strong> $spec</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create an element based on the provided specification<pre>Specification can contain any of the following:
- type: the Element class to use; defaults to \Zend\Form\Element
- name: what name to provide the element, if any
- options: an array, Traversable, or ArrayAccess object of element options
- attributes: an array, Traversable, or ArrayAccess object of element
  attributes to assign</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$spec</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException for an invalid $spec</code>
                </li>
                <li>
                  <code>Exception\DomainException for an invalid element type</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="createFieldset"/>
            <h4><span class="label public">public</span>createFieldset<span style="font-size:90%;">( <span class="param-type"><span title="array|Traversable|ArrayAccess">array|Traversable|ArrayAccess</span></span><strong> $spec</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create a fieldset based on the provided specification<pre>Specification can contain any of the following:
- type: the Fieldset class to use; defaults to \Zend\Form\Fieldset
- name: what name to provide the fieldset, if any
- options: an array, Traversable, or ArrayAccess object of element options
- attributes: an array, Traversable, or ArrayAccess object of element
  attributes to assign
- elements: an array or Traversable object where each entry is an array
  or ArrayAccess object containing the keys:
  - flags: (optional) array of flags to pass to FieldsetInterface::add()
  - spec: the actual element specification, per </pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$spec</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException for an invalid $spec</code>
                </li>
                <li>
                  <code>Exception\DomainException for an invalid fieldset type</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="createForm"/>
            <h4><span class="label public">public</span>createForm<span style="font-size:90%;">( <span class="param-type"><span title="array|Traversable|ArrayAccess">array|Traversable|ArrayAccess</span></span><strong> $spec</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create a form based on the provided specification<pre>Specification follows that of , and adds the
following keys:
- input_filter: input filter instance, named input filter class, or
  array specification for the input filter factory
- hydrator: hydrator instance or named hydrator class
</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$spec</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException for an invalid $spec</code>
                </li>
                <li>
                  <code>Exception\DomainException for an invalid form type</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getInputFilterFactory"/>
            <h4><span class="label public">public</span>getInputFilterFactory<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get current input filter factory<pre>If none provided, uses an unconfigured instance.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="prepareAndInjectFieldsets"/>
            <h4><span class="label public">public</span>prepareAndInjectFieldsets<span style="font-size:90%;">( <span class="param-type"><span title="array|Traversable|ArrayAccess">array|Traversable|ArrayAccess</span></span><strong> $fieldsets</strong>, <span class="param-type"><a href="../interfaces/Zend_Form_FieldsetInterface.xhtml">Zend\Form\FieldsetInterface</a></span><strong> $masterFieldset</strong>, <span class="param-type">string</span><strong> $method</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Takes a list of fieldset specifications, creates the fieldsets, and injects them into the master fieldset</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$fieldsets</code> - </li>
                <li><code>$masterFieldset</code> - </li>
                <li><code>$method</code> - Method invoking this one (for exception messages)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setInputFilterFactory"/>
            <h4><span class="label public">public</span>setInputFilterFactory<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Zend_InputFilter_Factory.xhtml">Zend\InputFilter\Factory</a></span><strong> $inputFilterFactory</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set input filter factory to use when creating forms</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$inputFilterFactory</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isSubclassOf"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>isSubclassOf<span style="font-size:90%;">( <span class="param-type">string</span><strong> $className</strong>, <span class="param-type">string</span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if the object has this class as one of its parents</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$className</code> - </li>
                <li><code>$type</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="prepareAndInjectElements"/>
            <h4><span class="label protected">protected</span>prepareAndInjectElements<span style="font-size:90%;">( <span class="param-type"><span title="array|Traversable|ArrayAccess">array|Traversable|ArrayAccess</span></span><strong> $elements</strong>, <span class="param-type"><a href="../interfaces/Zend_Form_FieldsetInterface.xhtml">Zend\Form\FieldsetInterface</a></span><strong> $fieldset</strong>, <span class="param-type">string</span><strong> $method</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Takes a list of element specifications, creates the elements, and injects them into the provided fieldset</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$elements</code> - </li>
                <li><code>$fieldset</code> - </li>
                <li><code>$method</code> - Method invoking this one (for exception messages)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="prepareAndInjectHydrator"/>
            <h4><span class="label protected">protected</span>prepareAndInjectHydrator<span style="font-size:90%;">( <span class="param-type">string</span><strong> $hydratorOrName</strong>, <span class="param-type"><a href="../interfaces/Zend_Form_FieldsetInterface.xhtml">Zend\Form\FieldsetInterface</a></span><strong> $fieldset</strong>, <span class="param-type">string</span><strong> $method</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Prepare and inject a named hydrator<pre>Takes a string indicating a hydrator class name (or a concrete instance), instantiates the class
by that name, and injects the hydrator instance into the form.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$hydratorOrName</code> - </li>
                <li><code>$fieldset</code> - </li>
                <li><code>$method</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\DomainException If $hydratorOrName is not a string, does not resolve to a known class, or</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="prepareAndInjectInputFilter"/>
            <h4><span class="label protected">protected</span>prepareAndInjectInputFilter<span style="font-size:90%;">( <span class="param-type"><span title="string|array|Traversable">string|array|Traversable</span></span><strong> $spec</strong>, <span class="param-type"><a href="../interfaces/Zend_Form_FormInterface.xhtml">Zend\Form\FormInterface</a></span><strong> $form</strong>, <span class="param-type">string</span><strong> $method</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Prepare an input filter instance and inject in the provided form<pre>If the input filter specified is a string, assumes it is a class name,
and attempts to instantiate it. If the class does not exist, or does
not extend InputFilterInterface, an exception is raised.

Otherwise, $spec is passed on to the attached InputFilter Factory
instance in order to create the input filter.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$spec</code> - </li>
                <li><code>$form</code> - </li>
                <li><code>$method</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\DomainException for unknown InputFilter class or invalid InputFilter instance</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="prepareAndInjectObject"/>
            <h4><span class="label protected">protected</span>prepareAndInjectObject<span style="font-size:90%;">( <span class="param-type">string</span><strong> $objectName</strong>, <span class="param-type"><a href="../interfaces/Zend_Form_FieldsetInterface.xhtml">Zend\Form\FieldsetInterface</a></span><strong> $fieldset</strong>, <span class="param-type">string</span><strong> $method</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Prepare and inject an object<pre>Takes a string indicating a class name, instantiates the class
by that name, and injects the class instance as the bound object.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$objectName</code> - </li>
                <li><code>$fieldset</code> - </li>
                <li><code>$method</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\DomainException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="prepareAndInjectValidationGroup"/>
            <h4><span class="label protected">protected</span>prepareAndInjectValidationGroup<span style="font-size:90%;">( <span class="param-type"><span title="string|array|Traversable">string|array|Traversable</span></span><strong> $spec</strong>, <span class="param-type"><a href="../interfaces/Zend_Form_FormInterface.xhtml">Zend\Form\FormInterface</a></span><strong> $form</strong>, <span class="param-type">string</span><strong> $method</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Prepare a validation group and inject in the provided form<pre>Takes an array of elements names</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$spec</code> - </li>
                <li><code>$form</code> - </li>
                <li><code>$method</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\DomainException if validation group given is not an array</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validateSpecification"/>
            <h4><span class="label protected">protected</span>validateSpecification<span style="font-size:90%;">( <span class="param-type"><span title="array|Traversable|ArrayAccess">array|Traversable|ArrayAccess</span></span><strong> $spec</strong>, <span class="param-type">string</span><strong> $method</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validate a provided specification<pre>Ensures we have an array, Traversable, or ArrayAccess object, and returns it.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$spec</code> - </li>
                <li><code>$method</code> - Method invoking the validator</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\InvalidArgumentException for invalid $spec</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-38-gec79141-dirty - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
