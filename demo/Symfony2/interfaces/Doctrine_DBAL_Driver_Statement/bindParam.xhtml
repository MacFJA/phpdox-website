<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:pu="http://schema.phpunit.de/coverage/1.0" lang="en">
  <head>
    <title>phpDox - Test Method</title>
    <link rel="stylesheet" type="text/css" href="../../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../../classes.xhtml">Classes</a>
          </li>
          <li class="separator">
            <a href="../../classes.xhtml#Doctrine_DBAL_Driver">Doctrine\DBAL\Driver</a>
          </li>
          <li class="separator">
            <a title="Doctrine\DBAL\Driver\Statement" href="../../interfaces/Doctrine_DBAL_Driver_Statement.xhtml">Statement</a>
          </li>
          <li class="separator">bindParam</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#parameter">Parameter</a>
          </li>
          <li>
            <a href="#return">Return</a>
          </li>
          <li>
            <a href="../../source/doctrine/dbal/lib/Doctrine/DBAL/Driver/Statement.php.xhtml#line76">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1><small>Doctrine\DBAL\Driver\Statement::</small>bindParam</h1>
        <h4>Binds a PHP variable to a corresponding named or question mark placeholder in the SQL statement that was use to prepare the statement. Unlike PDOStatement-&gt;bindValue(), the variable is bound as a reference and will only be evaluated at the time that PDOStatement-&gt;execute() is called.</h4>
        <p>Most parameters are input parameters, that is, parameters that are
used in a read-only fashion to build up the query. Some drivers support the invocation
of stored procedures that return data as output parameters, and some also as input/output
parameters that both send in data and are updated to receive it.</p>
        <ul/>
        <h2 id="signature">Signature</h2>
        <div class="styled synopsis">
          <code>public function bindParam(mixed
        $column,
            [mixed&amp;
        $variable = null,
            [integer
        $type = null,
            [integer
        $length = null]]] )
            </code>
        </div>
        <h2 id="parameterlist">Parameters</h2>
        <dl class="styled">
          <dt><code>$column</code>
                —
                mixed</dt>
          <dd>Parameter identifier. For a prepared statement using named placeholders,<br/>this will be a parameter name of the form :name. For a prepared statement<br/>                             using question mark placeholders, this will be the 1-indexed position of the parameter</dd>
          <dt><code>$variable</code>
                —
                mixed</dt>
          <dd>Name of the PHP variable to bind to the SQL statement parameter.</dd>
          <dt><code>$type</code>
                —
                integer</dt>
          <dd>Explicit data type for the parameter using the PDO::PARAM_* constants. To return<br/>an INOUT parameter from a stored procedure, use the bitwise OR operator to set the<br/>                             PDO::PARAM_INPUT_OUTPUT bits for the data_type parameter.</dd>
          <dt><code>$length</code>
                —
                integer</dt>
          <dd>You must specify maxlength when using an OUT bind so that PHP allocates enough memory to hold the returned value.</dd>
        </dl>
        <h2 id="return">Returns</h2>
        <dl class="styled">
          <dt>boolean</dt>
          <dd>Returns TRUE on success or FALSE on failure.</dd>
        </dl>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
