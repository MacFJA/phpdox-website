<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - Symfony\Component\Routing\Generator\ConfigurableRequirementsInterface</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../interfaces.xhtml">Interfaces</a>
          </li>
          <li class="separator">
            <a href="../interfaces.xhtml#Symfony_Component_Routing_Generator">Symfony\Component\Routing\Generator</a>
          </li>
          <li class="separator">ConfigurableRequirementsInterface</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#violations">Violations</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/symfony/symfony/src/Symfony/Component/Routing/Generator/ConfigurableRequirementsInterface.php.xhtml#line38">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>Symfony\Component\Routing\Generator\</small>ConfigurableRequirementsInterface</h1>
        <h4>ConfigurableRequirementsInterface must be implemented by URL generators that can be configured whether an exception should be generated when the parameters do not match the requirements. It is also possible to disable the requirements check for URL generation completely.</h4>
        <p>The possible configurations and use-cases:<br/>- setStrictRequirements(true): Throw an exception for mismatching requirements. This<br/>is mostly useful in development environment.<br/>- setStrictRequirements(false): Don't throw an exception but return null as URL for<br/>mismatching requirements and log the problem. Useful when you cannot control all<br/>params because they come from third party libs but don't want to have a 404 in<br/>production environment. It should log the mismatch so one can review it.<br/>- setStrictRequirements(null): Return the URL with the given parameters without<br/>checking the requirements at all. When generating an URL you should either trust<br/>your params or you validated them beforehand because otherwise it would break your<br/>link anyway. So in production environment you should know that params always pass<br/>the requirements. Thus this option allows to disable the check on URL generation for<br/>performance reasons (saving a preg_match for each requirement every time a URL is<br/>  generated).</p>
        <ul>
          <li>Author: Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">interface ConfigurableRequirementsInterface
            {<br/><ul class="none"><li>// methods</li><li>public void <a title="Symfony\Component\Routing\Generator\ConfigurableRequirementsInterface" href="../interfaces/Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface/setStrictRequirements.xhtml">setStrictRequirements</a>()
                    </li><li>public Boolean|null <a title="Symfony\Component\Routing\Generator\ConfigurableRequirementsInterface" href="../interfaces/Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface/isStrictRequirements.xhtml">isStrictRequirements</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>public</h4>
          <ul>
            <li id="isStrictRequirements"><a title="Symfony\Component\Routing\Generator\ConfigurableRequirementsInterface" href="../interfaces/Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface/isStrictRequirements.xhtml">isStrictRequirements()</a>
                — Returns whether to throw an exception on incorrect parameters.</li>
            <li id="setStrictRequirements"><a title="Symfony\Component\Routing\Generator\ConfigurableRequirementsInterface" href="../interfaces/Symfony_Component_Routing_Generator_ConfigurableRequirementsInterface/setStrictRequirements.xhtml">setStrictRequirements()</a>
                — Enables or disables the exception on incorrect parameters.</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
