<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <title>phpDox - Doctrine\ORM\Query\Parser</title>
    <link rel="stylesheet" type="text/css" href="../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml">Classes</a>
          </li>
          <li class="separator">
            <a href="../classes.xhtml#Doctrine_ORM_Query">Doctrine\ORM\Query</a>
          </li>
          <li class="separator">Parser</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#tasks">Tasks</a>
          </li>
          <li>
            <a href="#members">Members</a>
          </li>
          <li>
            <a href="#methods">Methods</a>
          </li>
          <li>
            <a href="../source/doctrine/orm/lib/Doctrine/ORM/Query/Parser.php.xhtml#line35">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1 id="introduction"><small>Doctrine\ORM\Query\</small>Parser</h1>
        <h4>An LL(*) recursive-descent parser for the context-free grammar of the Doctrine Query Language.</h4>
        <p>Parses a DQL query, reports any errors in it, and generates an AST.</p>
        <ul>
          <li>Author: Guilherme Blanco &lt;guilhermeblanco@hotmail.com&gt;</li>
        </ul>
        <h2 id="synopsis">Synopsis</h2>
        <div class="synopsis">class Parser
            {<br/><ul class="none"><li>// members</li><li>private array <a href="#members">$_STRING_FUNCTIONS</a>;
                    </li><li>private array <a href="#members">$_NUMERIC_FUNCTIONS</a>;
                    </li><li>private array <a href="#members">$_DATETIME_FUNCTIONS</a>;
                    </li><li>private array <a href="#members">$_deferredIdentificationVariables</a>;
                    </li><li>private array <a href="#members">$_deferredPartialObjectExpressions</a>;
                    </li><li>private array <a href="#members">$_deferredPathExpressions</a>;
                    </li><li>private array <a href="#members">$_deferredResultVariables</a>;
                    </li><li>private <span title="\Doctrine\ORM\Query\Lexer">Lexer</span> <a href="#members">$_lexer</a>;
                    </li><li>private <span title="\Doctrine\ORM\Query\ParserResult">ParserResult</span> <a href="#members">$_parserResult</a>;
                    </li><li>private <span title="Doctrine\ORM\Query\EnityManager">EnityManager</span> <a href="#members">$_em</a>;
                    </li><li>private <span title="Doctrine\ORM\Query">Query</span> <a href="#members">$_query</a>;
                    </li><li>private array <a href="#members">$_queryComponents</a>;
                    </li><li>private integer <a href="#members">$_nestingLevel</a>;
                    </li><li>private array <a href="#members">$_customTreeWalkers</a>;
                    </li><li>private <span title="Doctrine\ORM\Query\TreeWalker">TreeWalker</span> <a href="#members">$_customOutputWalker</a>;
                    </li><li>private array <a href="#members">$_identVariableExpressions</a>;
                    </li></ul><ul class="none"><li>// methods</li><li>public static bool <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/isInternalFunction.xhtml">isInternalFunction</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/__construct.xhtml">__construct</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/setCustomOutputTreeWalker.xhtml">setCustomOutputTreeWalker</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/addCustomTreeWalker.xhtml">addCustomTreeWalker</a>()
                    </li><li>public Lexer <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getLexer.xhtml">getLexer</a>()
                    </li><li>public ParserResult <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getParserResult.xhtml">getParserResult</a>()
                    </li><li>public EntityManager <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getEntityManager.xhtml">getEntityManager</a>()
                    </li><li>public SelectStatement <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getAST.xhtml">getAST</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/match.xhtml">match</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/free.xhtml">free</a>()
                    </li><li>public ParserResult <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/parse.xhtml">parse</a>()
                    </li><li>private void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/fixIdentificationVariableOrder.xhtml">fixIdentificationVariableOrder</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/syntaxError.xhtml">syntaxError</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/semanticalError.xhtml">semanticalError</a>()
                    </li><li>private array <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_peekBeyondClosingParenthesis.xhtml">_peekBeyondClosingParenthesis</a>()
                    </li><li>private boolean <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isMathOperator.xhtml">_isMathOperator</a>()
                    </li><li>private boolean <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isFunction.xhtml">_isFunction</a>()
                    </li><li>private boolean <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isAggregateFunction.xhtml">_isAggregateFunction</a>()
                    </li><li>private boolean <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isNextAllAnySome.xhtml">_isNextAllAnySome</a>()
                    </li><li>private void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredIdentificationVariables.xhtml">_processDeferredIdentificationVariables</a>()
                    </li><li>private void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredPartialObjectExpressions.xhtml">_processDeferredPartialObjectExpressions</a>()
                    </li><li>private void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredResultVariables.xhtml">_processDeferredResultVariables</a>()
                    </li><li>private void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredPathExpressions.xhtml">_processDeferredPathExpressions</a>()
                    </li><li>private void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processRootEntityAliasSelected.xhtml">_processRootEntityAliasSelected</a>()
                    </li><li>public SelectStatement <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/QueryLanguage.xhtml">QueryLanguage</a>()
                    </li><li>public SelectStatement <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SelectStatement.xhtml">SelectStatement</a>()
                    </li><li>public UpdateStatement <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/UpdateStatement.xhtml">UpdateStatement</a>()
                    </li><li>public DeleteStatement <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/DeleteStatement.xhtml">DeleteStatement</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/IdentificationVariable.xhtml">IdentificationVariable</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AliasIdentificationVariable.xhtml">AliasIdentificationVariable</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AbstractSchemaName.xhtml">AbstractSchemaName</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AliasResultVariable.xhtml">AliasResultVariable</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ResultVariable.xhtml">ResultVariable</a>()
                    </li><li>public JoinAssociationPathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/JoinAssociationPathExpression.xhtml">JoinAssociationPathExpression</a>()
                    </li><li>public PathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/PathExpression.xhtml">PathExpression</a>()
                    </li><li>public PathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AssociationPathExpression.xhtml">AssociationPathExpression</a>()
                    </li><li>public PathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SingleValuedPathExpression.xhtml">SingleValuedPathExpression</a>()
                    </li><li>public PathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/StateFieldPathExpression.xhtml">StateFieldPathExpression</a>()
                    </li><li>public PathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SingleValuedAssociationPathExpression.xhtml">SingleValuedAssociationPathExpression</a>()
                    </li><li>public PathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CollectionValuedPathExpression.xhtml">CollectionValuedPathExpression</a>()
                    </li><li>public SelectClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SelectClause.xhtml">SelectClause</a>()
                    </li><li>public SimpleSelectClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleSelectClause.xhtml">SimpleSelectClause</a>()
                    </li><li>public UpdateClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/UpdateClause.xhtml">UpdateClause</a>()
                    </li><li>public DeleteClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/DeleteClause.xhtml">DeleteClause</a>()
                    </li><li>public FromClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FromClause.xhtml">FromClause</a>()
                    </li><li>public SubselectFromClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SubselectFromClause.xhtml">SubselectFromClause</a>()
                    </li><li>public WhereClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/WhereClause.xhtml">WhereClause</a>()
                    </li><li>public HavingClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/HavingClause.xhtml">HavingClause</a>()
                    </li><li>public GroupByClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/GroupByClause.xhtml">GroupByClause</a>()
                    </li><li>public OrderByClause <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/OrderByClause.xhtml">OrderByClause</a>()
                    </li><li>public Subselect <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/Subselect.xhtml">Subselect</a>()
                    </li><li>public UpdateItem <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/UpdateItem.xhtml">UpdateItem</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/GroupByItem.xhtml">GroupByItem</a>()
                    </li><li>public OrderByItem <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/OrderByItem.xhtml">OrderByItem</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/NewValue.xhtml">NewValue</a>()
                    </li><li>public IdentificationVariableDeclaration <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/IdentificationVariableDeclaration.xhtml">IdentificationVariableDeclaration</a>()
                    </li><li>public SubselectIdentificationVariableDeclaration <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SubselectIdentificationVariableDeclaration.xhtml">SubselectIdentificationVariableDeclaration</a>()
                    </li><li>public Join <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/Join.xhtml">Join</a>()
                    </li><li>public RangeVariableDeclaration <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/RangeVariableDeclaration.xhtml">RangeVariableDeclaration</a>()
                    </li><li>public JoinAssociationPathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/JoinAssociationDeclaration.xhtml">JoinAssociationDeclaration</a>()
                    </li><li>public array <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/PartialObjectExpression.xhtml">PartialObjectExpression</a>()
                    </li><li>public IndexBy <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/IndexBy.xhtml">IndexBy</a>()
                    </li><li>public mixed <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ScalarExpression.xhtml">ScalarExpression</a>()
                    </li><li>public mixed <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CaseExpression.xhtml">CaseExpression</a>()
                    </li><li>public CoalesceExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CoalesceExpression.xhtml">CoalesceExpression</a>()
                    </li><li>public NullIfExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/NullIfExpression.xhtml">NullIfExpression</a>()
                    </li><li>public GeneralExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/GeneralCaseExpression.xhtml">GeneralCaseExpression</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleCaseExpression.xhtml">SimpleCaseExpression</a>()
                    </li><li>public WhenExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/WhenClause.xhtml">WhenClause</a>()
                    </li><li>public SimpleWhenExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleWhenClause.xhtml">SimpleWhenClause</a>()
                    </li><li>public SelectExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SelectExpression.xhtml">SelectExpression</a>()
                    </li><li>public SimpleSelectExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleSelectExpression.xhtml">SimpleSelectExpression</a>()
                    </li><li>public ConditionalExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalExpression.xhtml">ConditionalExpression</a>()
                    </li><li>public ConditionalTerm <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalTerm.xhtml">ConditionalTerm</a>()
                    </li><li>public ConditionalFactor <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalFactor.xhtml">ConditionalFactor</a>()
                    </li><li>public ConditionalPrimary <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalPrimary.xhtml">ConditionalPrimary</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleConditionalExpression.xhtml">SimpleConditionalExpression</a>()
                    </li><li>public EmptyCollectionComparisonExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/EmptyCollectionComparisonExpression.xhtml">EmptyCollectionComparisonExpression</a>()
                    </li><li>public CollectionMemberExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CollectionMemberExpression.xhtml">CollectionMemberExpression</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/Literal.xhtml">Literal</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InParameter.xhtml">InParameter</a>()
                    </li><li>public InputParameter <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InputParameter.xhtml">InputParameter</a>()
                    </li><li>public ArithmeticExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticExpression.xhtml">ArithmeticExpression</a>()
                    </li><li>public SimpleArithmeticExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleArithmeticExpression.xhtml">SimpleArithmeticExpression</a>()
                    </li><li>public ArithmeticTerm <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticTerm.xhtml">ArithmeticTerm</a>()
                    </li><li>public ArithmeticFactor <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticFactor.xhtml">ArithmeticFactor</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticPrimary.xhtml">ArithmeticPrimary</a>()
                    </li><li>public StringPrimary <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/StringExpression.xhtml">StringExpression</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/StringPrimary.xhtml">StringPrimary</a>()
                    </li><li>public SingleValuedAssociationPathExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/EntityExpression.xhtml">EntityExpression</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleEntityExpression.xhtml">SimpleEntityExpression</a>()
                    </li><li>public AggregateExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AggregateExpression.xhtml">AggregateExpression</a>()
                    </li><li>public QuantifiedExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/QuantifiedExpression.xhtml">QuantifiedExpression</a>()
                    </li><li>public BetweenExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/BetweenExpression.xhtml">BetweenExpression</a>()
                    </li><li>public ComparisonExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ComparisonExpression.xhtml">ComparisonExpression</a>()
                    </li><li>public InExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InExpression.xhtml">InExpression</a>()
                    </li><li>public InstanceOfExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InstanceOfExpression.xhtml">InstanceOfExpression</a>()
                    </li><li>public mixed <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InstanceOfParameter.xhtml">InstanceOfParameter</a>()
                    </li><li>public LikeExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/LikeExpression.xhtml">LikeExpression</a>()
                    </li><li>public NullComparisonExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/NullComparisonExpression.xhtml">NullComparisonExpression</a>()
                    </li><li>public ExistsExpression <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ExistsExpression.xhtml">ExistsExpression</a>()
                    </li><li>public string <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ComparisonOperator.xhtml">ComparisonOperator</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionDeclaration.xhtml">FunctionDeclaration</a>()
                    </li><li>private void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionDeclaration.xhtml">CustomFunctionDeclaration</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionsReturningNumerics.xhtml">FunctionsReturningNumerics</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionsReturningNumerics.xhtml">CustomFunctionsReturningNumerics</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionsReturningDatetime.xhtml">FunctionsReturningDatetime</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionsReturningDatetime.xhtml">CustomFunctionsReturningDatetime</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionsReturningStrings.xhtml">FunctionsReturningStrings</a>()
                    </li><li>public void <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionsReturningStrings.xhtml">CustomFunctionsReturningStrings</a>()
                    </li></ul>

            }<br/></div>
        <h2 id="tasks">Tasks</h2>
        <table class="styled">
          <thead>
            <tr>
              <th style="width:3em;">Line</th>
              <th>Task</th>
            </tr>
          </thead>
          <tr>
            <td class="nummeric">249</td>
            <td>Is there a way to remove this? It may impact the mixed hydration resultset a lot!</td>
          </tr>
        </table>
        <h2 id="members">Members</h2>
        <div class="styled members">
          <h4>private</h4>
          <ul class="members">
            <li id="_DATETIME_FUNCTIONS">
              <strong>$_DATETIME_FUNCTIONS</strong>
              <br/>
              <span class="indent">READ-ONLY: Maps BUILT-IN datetime function names to AST class names.</span>
            </li>
            <li id="_NUMERIC_FUNCTIONS">
              <strong>$_NUMERIC_FUNCTIONS</strong>
              <br/>
              <span class="indent">READ-ONLY: Maps BUILT-IN numeric function names to AST class names.</span>
            </li>
            <li id="_STRING_FUNCTIONS">
              <strong>$_STRING_FUNCTIONS</strong>
              <br/>
              <span class="indent">READ-ONLY: Maps BUILT-IN string function names to AST class names.</span>
            </li>
            <li id="_customOutputWalker"><strong>$_customOutputWalker</strong>
                —
                <a href="#">Doctrine\ORM\Query\TreeWalker</a><br/><span class="indent">The custom last tree walker, if any, that is responsible for producing the output.</span></li>
            <li id="_customTreeWalkers"><strong>$_customTreeWalkers</strong>
                —
                array<br/><span class="indent">Any additional custom tree walkers that modify the AST.</span></li>
            <li id="_deferredIdentificationVariables">
              <strong>$_deferredIdentificationVariables</strong>
              <br/>
              <span class="indent">Expressions that were encountered during parsing of identifiers and expressions and still need to be validated.</span>
            </li>
            <li id="_deferredPartialObjectExpressions">
              <strong>$_deferredPartialObjectExpressions</strong>
            </li>
            <li id="_deferredPathExpressions">
              <strong>$_deferredPathExpressions</strong>
            </li>
            <li id="_deferredResultVariables">
              <strong>$_deferredResultVariables</strong>
            </li>
            <li id="_em"><strong>$_em</strong>
                —
                <a href="#">Doctrine\ORM\Query\EnityManager</a><br/><span class="indent">The EntityManager.</span></li>
            <li id="_identVariableExpressions"><strong>$_identVariableExpressions</strong>
                —
                array</li>
            <li id="_lexer"><strong>$_lexer</strong>
                —
                <a href="#">\Doctrine\ORM\Query\Lexer</a><br/><span class="indent">The lexer.</span></li>
            <li id="_nestingLevel"><strong>$_nestingLevel</strong>
                —
                integer<br/><span class="indent">Keeps the nesting level of defined ResultVariables</span></li>
            <li id="_parserResult"><strong>$_parserResult</strong>
                —
                <a href="#">\Doctrine\ORM\Query\ParserResult</a><br/><span class="indent">The parser result.</span></li>
            <li id="_query"><strong>$_query</strong>
                —
                <a href="#">Doctrine\ORM\Query</a><br/><span class="indent">The Query to parse.</span></li>
            <li id="_queryComponents"><strong>$_queryComponents</strong>
                —
                array<br/><span class="indent">Map of declared query components in the parsed query.</span></li>
          </ul>
        </div>
        <h2 id="methods">Methods</h2>
        <div class="styled">
          <h4>private</h4>
          <ul>
            <li id="CustomFunctionDeclaration"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionDeclaration.xhtml">CustomFunctionDeclaration()</a>
                — Helper function for FunctionDeclaration grammar rule</li>
            <li id="_isAggregateFunction"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isAggregateFunction.xhtml">_isAggregateFunction()</a>
                — Checks whether the given token type indicates an aggregate function.</li>
            <li id="_isFunction"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isFunction.xhtml">_isFunction()</a>
                — Checks if the next-next (after lookahead) token starts a function.</li>
            <li id="_isMathOperator"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isMathOperator.xhtml">_isMathOperator()</a>
                — Checks if the given token indicates a mathematical operator.</li>
            <li id="_isNextAllAnySome"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_isNextAllAnySome.xhtml">_isNextAllAnySome()</a>
                — Checks whether the current lookahead token of the lexer has the type T_ALL, T_ANY or T_SOME.</li>
            <li id="_peekBeyondClosingParenthesis"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_peekBeyondClosingParenthesis.xhtml">_peekBeyondClosingParenthesis()</a>
                — Peek beyond the matched closing parenthesis and return the first token after that one.</li>
            <li id="_processDeferredIdentificationVariables"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredIdentificationVariables.xhtml">_processDeferredIdentificationVariables()</a>
                — Validates that the given &lt;tt&gt;IdentificationVariable&lt;/tt&gt; is semantically correct.</li>
            <li id="_processDeferredPartialObjectExpressions"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredPartialObjectExpressions.xhtml">_processDeferredPartialObjectExpressions()</a>
                — Validates that the given &lt;tt&gt;PartialObjectExpression&lt;/tt&gt; is semantically correct.</li>
            <li id="_processDeferredPathExpressions"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredPathExpressions.xhtml">_processDeferredPathExpressions()</a>
                — Validates that the given &lt;tt&gt;PathExpression&lt;/tt&gt; is semantically correct for grammar rules:</li>
            <li id="_processDeferredResultVariables"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processDeferredResultVariables.xhtml">_processDeferredResultVariables()</a>
                — Validates that the given &lt;tt&gt;ResultVariable&lt;/tt&gt; is semantically correct.</li>
            <li id="_processRootEntityAliasSelected">
              <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/_processRootEntityAliasSelected.xhtml">_processRootEntityAliasSelected()</a>
            </li>
            <li id="fixIdentificationVariableOrder"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/fixIdentificationVariableOrder.xhtml">fixIdentificationVariableOrder()</a>
                — Fix order of identification variables.</li>
          </ul>
          <h4>public</h4>
          <ul>
            <li id="__construct"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/__construct.xhtml">__construct()</a>
                — Creates a new query parser object.</li>
            <li id="AbstractSchemaName"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AbstractSchemaName.xhtml">AbstractSchemaName()</a>
                — AbstractSchemaName ::= identifier</li>
            <li id="AggregateExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AggregateExpression.xhtml">AggregateExpression()</a>
                — AggregateExpression ::=  ("AVG" | "MAX" | "MIN" | "SUM") "(" ["DISTINCT"] StateFieldPathExpression ")" |  "COUNT" "(" ["DISTINCT"] (IdentificationVariable | SingleValuedPathExpression) ")"</li>
            <li id="AliasIdentificationVariable"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AliasIdentificationVariable.xhtml">AliasIdentificationVariable()</a>
                — AliasIdentificationVariable = identifier</li>
            <li id="AliasResultVariable"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AliasResultVariable.xhtml">AliasResultVariable()</a>
                — AliasResultVariable ::= identifier</li>
            <li id="ArithmeticExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticExpression.xhtml">ArithmeticExpression()</a>
                — ArithmeticExpression ::= SimpleArithmeticExpression | "(" Subselect ")"</li>
            <li id="ArithmeticFactor"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticFactor.xhtml">ArithmeticFactor()</a>
                — ArithmeticFactor ::= [("+" | "-")] ArithmeticPrimary</li>
            <li id="ArithmeticPrimary"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticPrimary.xhtml">ArithmeticPrimary()</a>
                — ArithmeticPrimary ::= SingleValuedPathExpression | Literal | "(" SimpleArithmeticExpression ")"          | FunctionsReturningNumerics | AggregateExpression | FunctionsReturningStrings          | FunctionsReturningDatetime | IdentificationVariable | ResultVariable          | InputParameter | CaseExpression</li>
            <li id="ArithmeticTerm"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ArithmeticTerm.xhtml">ArithmeticTerm()</a>
                — ArithmeticTerm ::= ArithmeticFactor {("*" | "/") ArithmeticFactor}</li>
            <li id="AssociationPathExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/AssociationPathExpression.xhtml">AssociationPathExpression()</a>
                — AssociationPathExpression ::= CollectionValuedPathExpression | SingleValuedAssociationPathExpression</li>
            <li id="BetweenExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/BetweenExpression.xhtml">BetweenExpression()</a>
                — BetweenExpression ::= ArithmeticExpression ["NOT"] "BETWEEN" ArithmeticExpression "AND" ArithmeticExpression</li>
            <li id="CaseExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CaseExpression.xhtml">CaseExpression()</a>
                — CaseExpression ::= GeneralCaseExpression | SimpleCaseExpression | CoalesceExpression | NullifExpression GeneralCaseExpression ::= "CASE" WhenClause {WhenClause}* "ELSE" ScalarExpression "END" WhenClause ::= "WHEN" ConditionalExpression "THEN" ScalarExpression SimpleCaseExpression ::= "CASE" CaseOperand SimpleWhenClause {SimpleWhenClause}* "ELSE" ScalarExpression "END" CaseOperand ::= StateFieldPathExpression | TypeDiscriminator SimpleWhenClause ::= "WHEN" ScalarExpression "THEN" ScalarExpression CoalesceExpression ::= "COALESCE" "(" ScalarExpression {"," ScalarExpression}* ")" NullifExpression ::= "NULLIF" "(" ScalarExpression "," ScalarExpression ")"</li>
            <li id="CoalesceExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CoalesceExpression.xhtml">CoalesceExpression()</a>
                — CoalesceExpression ::= "COALESCE" "(" ScalarExpression {"," ScalarExpression}* ")"</li>
            <li id="CollectionMemberExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CollectionMemberExpression.xhtml">CollectionMemberExpression()</a>
                — CollectionMemberExpression ::= EntityExpression ["NOT"] "MEMBER" ["OF"] CollectionValuedPathExpression</li>
            <li id="CollectionValuedPathExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CollectionValuedPathExpression.xhtml">CollectionValuedPathExpression()</a>
                — CollectionValuedPathExpression ::= IdentificationVariable "." CollectionValuedAssociationField</li>
            <li id="ComparisonExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ComparisonExpression.xhtml">ComparisonExpression()</a>
                — ComparisonExpression ::= ArithmeticExpression ComparisonOperator ( QuantifiedExpression | ArithmeticExpression )</li>
            <li id="ComparisonOperator"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ComparisonOperator.xhtml">ComparisonOperator()</a>
                — ComparisonOperator ::= "=" | "&lt;" | "&lt;=" | "&lt;&gt;" | "&gt;" | "&gt;=" | "!="</li>
            <li id="ConditionalExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalExpression.xhtml">ConditionalExpression()</a>
                — ConditionalExpression ::= ConditionalTerm {"OR" ConditionalTerm}</li>
            <li id="ConditionalFactor"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalFactor.xhtml">ConditionalFactor()</a>
                — ConditionalFactor ::= ["NOT"] ConditionalPrimary</li>
            <li id="ConditionalPrimary"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalPrimary.xhtml">ConditionalPrimary()</a>
                — ConditionalPrimary ::= SimpleConditionalExpression | "(" ConditionalExpression ")"</li>
            <li id="ConditionalTerm"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ConditionalTerm.xhtml">ConditionalTerm()</a>
                — ConditionalTerm ::= ConditionalFactor {"AND" ConditionalFactor}</li>
            <li id="CustomFunctionsReturningDatetime">
              <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionsReturningDatetime.xhtml">CustomFunctionsReturningDatetime()</a>
            </li>
            <li id="CustomFunctionsReturningNumerics">
              <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionsReturningNumerics.xhtml">CustomFunctionsReturningNumerics()</a>
            </li>
            <li id="CustomFunctionsReturningStrings">
              <a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/CustomFunctionsReturningStrings.xhtml">CustomFunctionsReturningStrings()</a>
            </li>
            <li id="DeleteClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/DeleteClause.xhtml">DeleteClause()</a>
                — DeleteClause ::= "DELETE" ["FROM"] AbstractSchemaName ["AS"] AliasIdentificationVariable</li>
            <li id="DeleteStatement"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/DeleteStatement.xhtml">DeleteStatement()</a>
                — DeleteStatement ::= DeleteClause [WhereClause]</li>
            <li id="EmptyCollectionComparisonExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/EmptyCollectionComparisonExpression.xhtml">EmptyCollectionComparisonExpression()</a>
                — EmptyCollectionComparisonExpression ::= CollectionValuedPathExpression "IS" ["NOT"] "EMPTY"</li>
            <li id="EntityExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/EntityExpression.xhtml">EntityExpression()</a>
                — EntityExpression ::= SingleValuedAssociationPathExpression | SimpleEntityExpression</li>
            <li id="ExistsExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ExistsExpression.xhtml">ExistsExpression()</a>
                — ExistsExpression ::= ["NOT"] "EXISTS" "(" Subselect ")"</li>
            <li id="FromClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FromClause.xhtml">FromClause()</a>
                — FromClause ::= "FROM" IdentificationVariableDeclaration {"," IdentificationVariableDeclaration}</li>
            <li id="FunctionDeclaration"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionDeclaration.xhtml">FunctionDeclaration()</a>
                — FunctionDeclaration ::= FunctionsReturningStrings | FunctionsReturningNumerics | FunctionsReturningDatetime</li>
            <li id="FunctionsReturningDatetime"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionsReturningDatetime.xhtml">FunctionsReturningDatetime()</a>
                — FunctionsReturningDateTime ::= "CURRENT_DATE" | "CURRENT_TIME" | "CURRENT_TIMESTAMP"</li>
            <li id="FunctionsReturningNumerics"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionsReturningNumerics.xhtml">FunctionsReturningNumerics()</a>
                — FunctionsReturningNumerics ::=      "LENGTH" "(" StringPrimary ")" |      "LOCATE" "(" StringPrimary "," StringPrimary ["," SimpleArithmeticExpression]")" |      "ABS" "(" SimpleArithmeticExpression ")" |      "SQRT" "(" SimpleArithmeticExpression ")" |      "MOD" "(" SimpleArithmeticExpression "," SimpleArithmeticExpression ")" |      "SIZE" "(" CollectionValuedPathExpression ")"</li>
            <li id="FunctionsReturningStrings"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/FunctionsReturningStrings.xhtml">FunctionsReturningStrings()</a>
                — FunctionsReturningStrings ::=   "CONCAT" "(" StringPrimary "," StringPrimary ")" |   "SUBSTRING" "(" StringPrimary "," SimpleArithmeticExpression "," SimpleArithmeticExpression ")" |   "TRIM" "(" [["LEADING" | "TRAILING" | "BOTH"] [char] "FROM"] StringPrimary ")" |   "LOWER" "(" StringPrimary ")" |   "UPPER" "(" StringPrimary ")"</li>
            <li id="GeneralCaseExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/GeneralCaseExpression.xhtml">GeneralCaseExpression()</a>
                — GeneralCaseExpression ::= "CASE" WhenClause {WhenClause}* "ELSE" ScalarExpression "END"</li>
            <li id="GroupByClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/GroupByClause.xhtml">GroupByClause()</a>
                — GroupByClause ::= "GROUP" "BY" GroupByItem {"," GroupByItem}</li>
            <li id="GroupByItem"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/GroupByItem.xhtml">GroupByItem()</a>
                — GroupByItem ::= IdentificationVariable | ResultVariable | SingleValuedPathExpression</li>
            <li id="HavingClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/HavingClause.xhtml">HavingClause()</a>
                — HavingClause ::= "HAVING" ConditionalExpression</li>
            <li id="IdentificationVariable"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/IdentificationVariable.xhtml">IdentificationVariable()</a>
                — IdentificationVariable ::= identifier</li>
            <li id="IdentificationVariableDeclaration"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/IdentificationVariableDeclaration.xhtml">IdentificationVariableDeclaration()</a>
                — IdentificationVariableDeclaration ::= RangeVariableDeclaration [IndexBy] {Join}</li>
            <li id="InExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InExpression.xhtml">InExpression()</a>
                — InExpression ::= SingleValuedPathExpression ["NOT"] "IN" "(" (InParameter {"," InParameter}* | Subselect) ")"</li>
            <li id="InParameter"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InParameter.xhtml">InParameter()</a>
                — InParameter ::= Literal | InputParameter</li>
            <li id="IndexBy"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/IndexBy.xhtml">IndexBy()</a>
                — IndexBy ::= "INDEX" "BY" StateFieldPathExpression</li>
            <li id="InputParameter"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InputParameter.xhtml">InputParameter()</a>
                — InputParameter ::= PositionalParameter | NamedParameter</li>
            <li id="InstanceOfExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InstanceOfExpression.xhtml">InstanceOfExpression()</a>
                — InstanceOfExpression ::= IdentificationVariable ["NOT"] "INSTANCE" ["OF"] (InstanceOfParameter | "(" InstanceOfParameter {"," InstanceOfParameter}* ")")</li>
            <li id="InstanceOfParameter"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/InstanceOfParameter.xhtml">InstanceOfParameter()</a>
                — InstanceOfParameter ::= AbstractSchemaName | InputParameter</li>
            <li id="Join"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/Join.xhtml">Join()</a>
                — Join ::= ["LEFT" ["OUTER"] | "INNER"] "JOIN"          (JoinAssociationDeclaration | RangeVariableDeclaration)          ["WITH" ConditionalExpression]</li>
            <li id="JoinAssociationDeclaration"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/JoinAssociationDeclaration.xhtml">JoinAssociationDeclaration()</a>
                — JoinAssociationDeclaration ::= JoinAssociationPathExpression ["AS"] AliasIdentificationVariable [IndexBy]</li>
            <li id="JoinAssociationPathExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/JoinAssociationPathExpression.xhtml">JoinAssociationPathExpression()</a>
                — JoinAssociationPathExpression ::= IdentificationVariable "." (CollectionValuedAssociationField | SingleValuedAssociationField)</li>
            <li id="LikeExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/LikeExpression.xhtml">LikeExpression()</a>
                — LikeExpression ::= StringExpression ["NOT"] "LIKE" StringPrimary ["ESCAPE" char]</li>
            <li id="Literal"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/Literal.xhtml">Literal()</a>
                — Literal ::= string | char | integer | float | boolean</li>
            <li id="NewValue"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/NewValue.xhtml">NewValue()</a>
                — NewValue ::= SimpleArithmeticExpression | StringPrimary | DatetimePrimary | BooleanPrimary |      EnumPrimary | SimpleEntityExpression | "NULL"</li>
            <li id="NullComparisonExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/NullComparisonExpression.xhtml">NullComparisonExpression()</a>
                — NullComparisonExpression ::= (SingleValuedPathExpression | InputParameter) "IS" ["NOT"] "NULL"</li>
            <li id="NullIfExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/NullIfExpression.xhtml">NullIfExpression()</a>
                — NullIfExpression ::= "NULLIF" "(" ScalarExpression "," ScalarExpression ")"</li>
            <li id="OrderByClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/OrderByClause.xhtml">OrderByClause()</a>
                — OrderByClause ::= "ORDER" "BY" OrderByItem {"," OrderByItem}</li>
            <li id="OrderByItem"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/OrderByItem.xhtml">OrderByItem()</a>
                — OrderByItem ::= (      SimpleArithmeticExpression | SingleValuedPathExpression |      ScalarExpression | ResultVariable ) ["ASC" | "DESC"]</li>
            <li id="PartialObjectExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/PartialObjectExpression.xhtml">PartialObjectExpression()</a>
                — PartialObjectExpression ::= "PARTIAL" IdentificationVariable "." PartialFieldSet PartialFieldSet ::= "{" SimpleStateField {"," SimpleStateField}* "}"</li>
            <li id="PathExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/PathExpression.xhtml">PathExpression()</a>
                — Parses an arbitrary path expression and defers semantical validation based on expected types.</li>
            <li id="QuantifiedExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/QuantifiedExpression.xhtml">QuantifiedExpression()</a>
                — QuantifiedExpression ::= ("ALL" | "ANY" | "SOME") "(" Subselect ")"</li>
            <li id="QueryLanguage"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/QueryLanguage.xhtml">QueryLanguage()</a>
                — QueryLanguage ::= SelectStatement | UpdateStatement | DeleteStatement</li>
            <li id="RangeVariableDeclaration"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/RangeVariableDeclaration.xhtml">RangeVariableDeclaration()</a>
                — RangeVariableDeclaration ::= AbstractSchemaName ["AS"] AliasIdentificationVariable</li>
            <li id="ResultVariable"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ResultVariable.xhtml">ResultVariable()</a>
                — ResultVariable ::= identifier</li>
            <li id="ScalarExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/ScalarExpression.xhtml">ScalarExpression()</a>
                — ScalarExpression ::= SimpleArithmeticExpression | StringPrimary | DateTimePrimary |                      StateFieldPathExpression | BooleanPrimary | CaseExpression |                      InstanceOfExpression</li>
            <li id="SelectClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SelectClause.xhtml">SelectClause()</a>
                — SelectClause ::= "SELECT" ["DISTINCT"] SelectExpression {"," SelectExpression}</li>
            <li id="SelectExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SelectExpression.xhtml">SelectExpression()</a>
                — SelectExpression ::= (     IdentificationVariable | ScalarExpression | AggregateExpression | FunctionDeclaration |     PartialObjectExpression | "(" Subselect ")" | CaseExpression ) [["AS"] ["HIDDEN"] AliasResultVariable]</li>
            <li id="SelectStatement"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SelectStatement.xhtml">SelectStatement()</a>
                — SelectStatement ::= SelectClause FromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]</li>
            <li id="SimpleArithmeticExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleArithmeticExpression.xhtml">SimpleArithmeticExpression()</a>
                — SimpleArithmeticExpression ::= ArithmeticTerm {("+" | "-") ArithmeticTerm}</li>
            <li id="SimpleCaseExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleCaseExpression.xhtml">SimpleCaseExpression()</a>
                — SimpleCaseExpression ::= "CASE" CaseOperand SimpleWhenClause {SimpleWhenClause}* "ELSE" ScalarExpression "END" CaseOperand ::= StateFieldPathExpression | TypeDiscriminator</li>
            <li id="SimpleConditionalExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleConditionalExpression.xhtml">SimpleConditionalExpression()</a>
                — SimpleConditionalExpression ::=      ComparisonExpression | BetweenExpression | LikeExpression |      InExpression | NullComparisonExpression | ExistsExpression |      EmptyCollectionComparisonExpression | CollectionMemberExpression |      InstanceOfExpression</li>
            <li id="SimpleEntityExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleEntityExpression.xhtml">SimpleEntityExpression()</a>
                — SimpleEntityExpression ::= IdentificationVariable | InputParameter</li>
            <li id="SimpleSelectClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleSelectClause.xhtml">SimpleSelectClause()</a>
                — SimpleSelectClause ::= "SELECT" ["DISTINCT"] SimpleSelectExpression</li>
            <li id="SimpleSelectExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleSelectExpression.xhtml">SimpleSelectExpression()</a>
                — SimpleSelectExpression ::= (      StateFieldPathExpression | IdentificationVariable | FunctionDeclaration |      AggregateExpression | "(" Subselect ")" | ScalarExpression ) [["AS"] AliasResultVariable]</li>
            <li id="SimpleWhenClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SimpleWhenClause.xhtml">SimpleWhenClause()</a>
                — SimpleWhenClause ::= "WHEN" ScalarExpression "THEN" ScalarExpression</li>
            <li id="SingleValuedAssociationPathExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SingleValuedAssociationPathExpression.xhtml">SingleValuedAssociationPathExpression()</a>
                — SingleValuedAssociationPathExpression ::= IdentificationVariable "." SingleValuedAssociationField</li>
            <li id="SingleValuedPathExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SingleValuedPathExpression.xhtml">SingleValuedPathExpression()</a>
                — SingleValuedPathExpression ::= StateFieldPathExpression | SingleValuedAssociationPathExpression</li>
            <li id="StateFieldPathExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/StateFieldPathExpression.xhtml">StateFieldPathExpression()</a>
                — StateFieldPathExpression ::= IdentificationVariable "." StateField</li>
            <li id="StringExpression"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/StringExpression.xhtml">StringExpression()</a>
                — StringExpression ::= StringPrimary | "(" Subselect ")"</li>
            <li id="StringPrimary"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/StringPrimary.xhtml">StringPrimary()</a>
                — StringPrimary ::= StateFieldPathExpression | string | InputParameter | FunctionsReturningStrings | AggregateExpression | CaseExpression</li>
            <li id="Subselect"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/Subselect.xhtml">Subselect()</a>
                — Subselect ::= SimpleSelectClause SubselectFromClause [WhereClause] [GroupByClause] [HavingClause] [OrderByClause]</li>
            <li id="SubselectFromClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SubselectFromClause.xhtml">SubselectFromClause()</a>
                — SubselectFromClause ::= "FROM" SubselectIdentificationVariableDeclaration {"," SubselectIdentificationVariableDeclaration}</li>
            <li id="SubselectIdentificationVariableDeclaration"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/SubselectIdentificationVariableDeclaration.xhtml">SubselectIdentificationVariableDeclaration()</a>
                — SubselectIdentificationVariableDeclaration ::= IdentificationVariableDeclaration | (AssociationPathExpression ["AS"] AliasIdentificationVariable)</li>
            <li id="UpdateClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/UpdateClause.xhtml">UpdateClause()</a>
                — UpdateClause ::= "UPDATE" AbstractSchemaName ["AS"] AliasIdentificationVariable "SET" UpdateItem {"," UpdateItem}</li>
            <li id="UpdateItem"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/UpdateItem.xhtml">UpdateItem()</a>
                — UpdateItem ::= SingleValuedPathExpression "=" NewValue</li>
            <li id="UpdateStatement"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/UpdateStatement.xhtml">UpdateStatement()</a>
                — UpdateStatement ::= UpdateClause [WhereClause]</li>
            <li id="WhenClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/WhenClause.xhtml">WhenClause()</a>
                — WhenClause ::= "WHEN" ConditionalExpression "THEN" ScalarExpression</li>
            <li id="WhereClause"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/WhereClause.xhtml">WhereClause()</a>
                — WhereClause ::= "WHERE" ConditionalExpression</li>
            <li id="addCustomTreeWalker"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/addCustomTreeWalker.xhtml">addCustomTreeWalker()</a>
                — Adds a custom tree walker for modifying the AST.</li>
            <li id="free"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/free.xhtml">free()</a>
                — Free this parser enabling it to be reused</li>
            <li id="getAST"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getAST.xhtml">getAST()</a>
                — Parse and build AST for the given Query.</li>
            <li id="getEntityManager"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getEntityManager.xhtml">getEntityManager()</a>
                — Gets the EntityManager used by the parser.</li>
            <li id="getLexer"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getLexer.xhtml">getLexer()</a>
                — Gets the lexer used by the parser.</li>
            <li id="getParserResult"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/getParserResult.xhtml">getParserResult()</a>
                — Gets the ParserResult that is being filled with information during parsing.</li>
            <li id="isInternalFunction"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/isInternalFunction.xhtml">isInternalFunction()</a>
                — Check if a function is internally defined. Used to prevent overwriting of built-in functions through user-defined functions.</li>
            <li id="match"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/match.xhtml">match()</a>
                — Attempts to match the given token with the current lookahead token.</li>
            <li id="parse"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/parse.xhtml">parse()</a>
                — Parses a query string.</li>
            <li id="semanticalError"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/semanticalError.xhtml">semanticalError()</a>
                — Generates a new semantical error.</li>
            <li id="setCustomOutputTreeWalker"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/setCustomOutputTreeWalker.xhtml">setCustomOutputTreeWalker()</a>
                — Sets a custom tree walker that produces output.</li>
            <li id="syntaxError"><a title="Doctrine\ORM\Query\Parser" href="../classes/Doctrine_ORM_Query_Parser/syntaxError.xhtml">syntaxError()</a>
                — Generates a new syntax error.</li>
          </ul>
        </div>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
