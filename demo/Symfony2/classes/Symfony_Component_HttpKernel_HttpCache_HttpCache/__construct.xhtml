<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:pu="http://schema.phpunit.de/coverage/1.0" lang="en">
  <head>
    <title>phpDox - Test Method</title>
    <link rel="stylesheet" type="text/css" href="../../css/style.css" media="screen"/>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  </head>
  <body>
    <nav class="topnav">
      <ul>
        <li>
          <div class="logo"><span>/**</span>phpDox</div>
        </li>
        <li class="separator">
          <a href="../../index.xhtml">Overview</a>
        </li>
        <li class="separator">
          <a href="../../namespaces.xhtml">Namespaces</a>
        </li>
        <li>
          <a href="../../interfaces.xhtml">Interfaces</a>
        </li>
        <li>
          <a href="../../classes.xhtml">Classes</a>
        </li>
        <li>
          <a href="../../traits.xhtml">Traits</a>
        </li>
        <li class="separator">
          <a href="../../source/index.xhtml">Source</a>
        </li>
      </ul>
    </nav>
    <div id="mainstage">
      <div class="box">
        <ul class="breadcrumb">
          <li>
            <a href="../../index.xhtml">Overview</a>
          </li>
          <li class="separator">
            <a href="../../classes.xhtml">Classes</a>
          </li>
          <li class="separator">
            <a href="../../classes.xhtml#Symfony_Component_HttpKernel_HttpCache">Symfony\Component\HttpKernel\HttpCache</a>
          </li>
          <li class="separator">
            <a title="Symfony\Component\HttpKernel\HttpCache\HttpCache" href="../../classes/Symfony_Component_HttpKernel_HttpCache_HttpCache.xhtml">HttpCache</a>
          </li>
          <li class="separator">__construct</li>
        </ul>
      </div>
      <nav class="box">
        <ul>
          <li>
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#synopsis">Synopsis</a>
          </li>
          <li>
            <a href="#parameter">Parameter</a>
          </li>
          <li>
            <a href="../../source/symfony/symfony/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php.xhtml#line80">Source</a>
          </li>
        </ul>
      </nav>
      <section>
        <h1><small>Symfony\Component\HttpKernel\HttpCache\HttpCache::</small>__construct</h1>
        <h4>Constructor.</h4>
        <p>The available options are:

  * debug:                 If true, the traces are added as a HTTP header to ease debugging

  * default_ttl            The number of seconds that a cache entry should be considered
                           fresh when no explicit freshness information is provided in
                           a response. Explicit Cache-Control or Expires headers
                           override this value. (default: 0)

  * private_headers        Set of request headers that trigger "private" cache-control behavior
                           on responses that don't explicitly state whether the response is
                           public or private via a Cache-Control directive. (default: Authorization and Cookie)

  * allow_reload           Specifies whether the client can force a cache reload by including a
                           Cache-Control "no-cache" directive in the request. Set it to ``true``
                           for compliance with RFC 2616. (default: false)

  * allow_revalidate       Specifies whether the client can force a cache revalidate by including
                           a Cache-Control "max-age=0" directive in the request. Set it to ``true``
                           for compliance with RFC 2616. (default: false)

  * stale_while_revalidate Specifies the default number of seconds (the granularity is the second as the
                           Response TTL precision is a second) during which the cache can immediately return
                           a stale response while it revalidates it in the background (default: 2).
                           This setting is overridden by the stale-while-revalidate HTTP Cache-Control
                           extension (see RFC 5861).

  * stale_if_error         Specifies the default number of seconds (the granularity is the second) during which
                           the cache can serve a stale response when an error is encountered (default: 60).
                           This setting is overridden by the stale-if-error HTTP Cache-Control extension
                           (see RFC 5861).</p>
        <ul/>
        <h2 id="signature">Signature</h2>
        <div class="styled synopsis">
          <code>public function __construct(<a title="Symfony\Component\HttpKernel\HttpKernelInterface" href="../../classes/Symfony_Component_HttpKernel_HttpKernelInterface.xhtml">HttpKernelInterface</a>
        $kernel,
            [<a title="Symfony\Component\HttpKernel\HttpCache\StoreInterface" href="../../classes/Symfony_Component_HttpKernel_HttpCache_StoreInterface.xhtml">StoreInterface</a>
        $store = null,
            [<a title="Symfony\Component\HttpKernel\HttpCache\Esi" href="../../classes/Symfony_Component_HttpKernel_HttpCache_Esi.xhtml">Esi</a>
        $esi = null,
            array
        $options]] )
            </code>
        </div>
        <h2 id="parameterlist">Parameters</h2>
        <dl class="styled">
          <dt><code>$kernel</code>
                —
                <a href="#">Symfony\Component\HttpKernel\HttpKernelInterface</a></dt>
          <dd>An HttpKernelInterface instance<br/><br/><br/>      </dd>
          <dt><code>$store</code>
                —
                <a href="#">Symfony\Component\HttpKernel\HttpCache\StoreInterface</a></dt>
          <dd>A Store instance<br/><br/><br/>      </dd>
          <dt><code>$esi</code>
                —
                <a href="#">Symfony\Component\HttpKernel\HttpCache\Esi</a></dt>
          <dd>An Esi instance<br/><br/><br/>      </dd>
          <dt><code>$options</code>
                —
                array</dt>
          <dd>An array of options</dd>
        </dl>
      </section>
    </div>
    <footer>
      <span/>
    </footer>
  </body>
</html>
