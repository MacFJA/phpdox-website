<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>phpDox - Source of Events.php</title><link rel="stylesheet" type="text/css" href="../../../../../../css/style.css" media="screen"/><link rel="stylesheet" href="../../../../../../css/source.css"/><meta http-equiv="content-type" content="text/html; charset=utf-8"/></head><body><nav class="topnav"><ul><li><div class="logo"><span>/**</span>phpDox</div></li><li class="separator"><a href="../../../../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../../../../namespaces.xhtml">Namespaces</a></li><li><a href="../../../../../../interfaces.xhtml">Interfaces</a></li><li><a href="../../../../../../classes.xhtml">Classes</a></li><li><a href="../../../../../../traits.xhtml">Traits</a></li><li class="separator"><a href="../../../../../../source/index.xhtml">Source</a></li></ul></nav><div id="mainstage"><div class="box"><ul class="breadcrumb"><li><a href="../../../../../../index.xhtml">Overview</a></li><li class="separator"><a href="../../../../../../source/index.xhtml">Source</a></li></ul></div><h1>Source of file Events.php</h1><p>
                        Size: 5,096 Bytes - Last Modified: 2013-05-11T09:51:12+02:00</p><section><h2><small>/home/theseer/Downloads/Symfony/vendor/doctrine/orm/lib/Doctrine/ORM/</small>Events.php</h2><table class="source"><tr><td class="no"><a class="anker" href="#line1">1</a><a class="anker" href="#line2">2</a><a class="anker" href="#line3">3</a><a class="anker" href="#line4">4</a><a class="anker" href="#line5">5</a><a class="anker" href="#line6">6</a><a class="anker" href="#line7">7</a><a class="anker" href="#line8">8</a><a class="anker" href="#line9">9</a><a class="anker" href="#line10">10</a><a class="anker" href="#line11">11</a><a class="anker" href="#line12">12</a><a class="anker" href="#line13">13</a><a class="anker" href="#line14">14</a><a class="anker" href="#line15">15</a><a class="anker" href="#line16">16</a><a class="anker" href="#line17">17</a><a class="anker" href="#line18">18</a><a class="anker" href="#line19">19</a><a class="anker" href="#line20">20</a><a class="anker" href="#line21">21</a><a class="anker" href="#line22">22</a><a class="anker" href="#line23">23</a><a class="anker" href="#line24">24</a><a class="anker" href="#line25">25</a><a class="anker" href="#line26">26</a><a class="anker" href="#line27">27</a><a class="anker" href="#line28">28</a><a class="anker" href="#line29">29</a><a class="anker" href="#line30">30</a><a class="anker" href="#line31">31</a><a class="anker" href="#line32">32</a><a class="anker" href="#line33">33</a><a class="anker" href="#line34">34</a><a class="anker" href="#line35">35</a><a class="anker" href="#line36">36</a><a class="anker" href="#line37">37</a><a class="anker" href="#line38">38</a><a class="anker" href="#line39">39</a><a class="anker" href="#line40">40</a><a class="anker" href="#line41">41</a><a class="anker" href="#line42">42</a><a class="anker" href="#line43">43</a><a class="anker" href="#line44">44</a><a class="anker" href="#line45">45</a><a class="anker" href="#line46">46</a><a class="anker" href="#line47">47</a><a class="anker" href="#line48">48</a><a class="anker" href="#line49">49</a><a class="anker" href="#line50">50</a><a class="anker" href="#line51">51</a><a class="anker" href="#line52">52</a><a class="anker" href="#line53">53</a><a class="anker" href="#line54">54</a><a class="anker" href="#line55">55</a><a class="anker" href="#line56">56</a><a class="anker" href="#line57">57</a><a class="anker" href="#line58">58</a><a class="anker" href="#line59">59</a><a class="anker" href="#line60">60</a><a class="anker" href="#line61">61</a><a class="anker" href="#line62">62</a><a class="anker" href="#line63">63</a><a class="anker" href="#line64">64</a><a class="anker" href="#line65">65</a><a class="anker" href="#line66">66</a><a class="anker" href="#line67">67</a><a class="anker" href="#line68">68</a><a class="anker" href="#line69">69</a><a class="anker" href="#line70">70</a><a class="anker" href="#line71">71</a><a class="anker" href="#line72">72</a><a class="anker" href="#line73">73</a><a class="anker" href="#line74">74</a><a class="anker" href="#line75">75</a><a class="anker" href="#line76">76</a><a class="anker" href="#line77">77</a><a class="anker" href="#line78">78</a><a class="anker" href="#line79">79</a><a class="anker" href="#line80">80</a><a class="anker" href="#line81">81</a><a class="anker" href="#line82">82</a><a class="anker" href="#line83">83</a><a class="anker" href="#line84">84</a><a class="anker" href="#line85">85</a><a class="anker" href="#line86">86</a><a class="anker" href="#line87">87</a><a class="anker" href="#line88">88</a><a class="anker" href="#line89">89</a><a class="anker" href="#line90">90</a><a class="anker" href="#line91">91</a><a class="anker" href="#line92">92</a><a class="anker" href="#line93">93</a><a class="anker" href="#line94">94</a><a class="anker" href="#line95">95</a><a class="anker" href="#line96">96</a><a class="anker" href="#line97">97</a><a class="anker" href="#line98">98</a><a class="anker" href="#line99">99</a><a class="anker" href="#line100">100</a><a class="anker" href="#line101">101</a><a class="anker" href="#line102">102</a><a class="anker" href="#line103">103</a><a class="anker" href="#line104">104</a><a class="anker" href="#line105">105</a><a class="anker" href="#line106">106</a><a class="anker" href="#line107">107</a><a class="anker" href="#line108">108</a><a class="anker" href="#line109">109</a><a class="anker" href="#line110">110</a><a class="anker" href="#line111">111</a><a class="anker" href="#line112">112</a><a class="anker" href="#line113">113</a><a class="anker" href="#line114">114</a><a class="anker" href="#line115">115</a><a class="anker" href="#line116">116</a><a class="anker" href="#line117">117</a><a class="anker" href="#line118">118</a><a class="anker" href="#line119">119</a><a class="anker" href="#line120">120</a><a class="anker" href="#line121">121</a><a class="anker" href="#line122">122</a><a class="anker" href="#line123">123</a><a class="anker" href="#line124">124</a><a class="anker" href="#line125">125</a><a class="anker" href="#line126">126</a><a class="anker" href="#line127">127</a><a class="anker" href="#line128">128</a><a class="anker" href="#line129">129</a><a class="anker" href="#line130">130</a><a class="anker" href="#line131">131</a><a class="anker" href="#line132">132</a><a class="anker" href="#line133">133</a><a class="anker" href="#line134">134</a><a class="anker" href="#line135">135</a><a class="anker" href="#line136">136</a><a class="anker" href="#line137">137</a><a class="anker" href="#line138">138</a><a class="anker" href="#line139">139</a><a class="anker" href="#line140">140</a><a class="anker" href="#line141">141</a><a class="anker" href="#line142">142</a><a class="anker" href="#line143">143</a><a class="anker" href="#line144">144</a><a class="anker" href="#line145">145</a><a class="anker" href="#line146">146</a><a class="anker" href="#line147">147</a></td><td class="line"><div id="line1"><pre><span class="token T_OPEN_TAG">&lt;?php</span></pre></div><div id="line2"><pre><span class="token T_COMMENT">/*</span></pre></div><div id="line3"><pre><span class="token T_COMMENT"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></pre></div><div id="line4"><pre><span class="token T_COMMENT"> * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></pre></div><div id="line5"><pre><span class="token T_COMMENT"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></pre></div><div id="line6"><pre><span class="token T_COMMENT"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></pre></div><div id="line7"><pre><span class="token T_COMMENT"> * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></pre></div><div id="line8"><pre><span class="token T_COMMENT"> * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></pre></div><div id="line9"><pre><span class="token T_COMMENT"> * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></pre></div><div id="line10"><pre><span class="token T_COMMENT"> * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></pre></div><div id="line11"><pre><span class="token T_COMMENT"> * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></pre></div><div id="line12"><pre><span class="token T_COMMENT"> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></pre></div><div id="line13"><pre><span class="token T_COMMENT"> * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></pre></div><div id="line14"><pre><span class="token T_COMMENT"> *</span></pre></div><div id="line15"><pre><span class="token T_COMMENT"> * This software consists of voluntary contributions made by many individuals</span></pre></div><div id="line16"><pre><span class="token T_COMMENT"> * and is licensed under the MIT license. For more information, see</span></pre></div><div id="line17"><pre><span class="token T_COMMENT"> * &lt;http://www.doctrine-project.org&gt;.</span></pre></div><div id="line18"><pre><span class="token T_COMMENT"> */</span></pre></div><div id="line19"><br/></div><div id="line20"><pre><span class="token T_NAMESPACE">namespace</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Doctrine</span><span class="token T_NS_SEPARATOR">\</span><span class="token T_STRING">ORM</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line21"><br/></div><div id="line22"><pre><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line23"><pre><span class="token T_DOC_COMMENT"> * Container for all ORM events.</span></pre></div><div id="line24"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line25"><pre><span class="token T_DOC_COMMENT"> * This class cannot be instantiated.</span></pre></div><div id="line26"><pre><span class="token T_DOC_COMMENT"> *</span></pre></div><div id="line27"><pre><span class="token T_DOC_COMMENT"> * @author Roman Borschel &lt;roman@code-factory.org&gt;</span></pre></div><div id="line28"><pre><span class="token T_DOC_COMMENT"> * @since 2.0</span></pre></div><div id="line29"><pre><span class="token T_DOC_COMMENT"> */</span></pre></div><div id="line30"><pre><span class="token T_FINAL">final</span><span class="token T_WHITESPACE"> </span><span class="token T_CLASS">class</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">Events</span></pre></div><div id="line31"><pre><span class="token T_PHPDOX_OPEN_CURLY">{</span></pre></div><div id="line32"><pre><span class="token T_WHITESPACE">    </span><span class="token T_PRIVATE">private</span><span class="token T_WHITESPACE"> </span><span class="token T_FUNCTION">function</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">__construct</span><span class="token T_PHPDOX_OPEN_BRACKET">(</span><span class="token T_PHPDOX_CLOSE_BRACKET">)</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_OPEN_CURLY">{</span><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line33"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line34"><pre><span class="token T_DOC_COMMENT">     * The preRemove event occurs for a given entity before the respective</span></pre></div><div id="line35"><pre><span class="token T_DOC_COMMENT">     * EntityManager remove operation for that entity is executed.</span></pre></div><div id="line36"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line37"><pre><span class="token T_DOC_COMMENT">     * This is an entity lifecycle event.</span></pre></div><div id="line38"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line39"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line40"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line41"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">preRemove</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'preRemove'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line42"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line43"><pre><span class="token T_DOC_COMMENT">     * The postRemove event occurs for an entity after the entity has</span></pre></div><div id="line44"><pre><span class="token T_DOC_COMMENT">     * been deleted. It will be invoked after the database delete operations.</span></pre></div><div id="line45"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line46"><pre><span class="token T_DOC_COMMENT">     * This is an entity lifecycle event.</span></pre></div><div id="line47"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line48"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line49"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line50"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">postRemove</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'postRemove'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line51"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line52"><pre><span class="token T_DOC_COMMENT">     * The prePersist event occurs for a given entity before the respective</span></pre></div><div id="line53"><pre><span class="token T_DOC_COMMENT">     * EntityManager persist operation for that entity is executed.</span></pre></div><div id="line54"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line55"><pre><span class="token T_DOC_COMMENT">     * This is an entity lifecycle event.</span></pre></div><div id="line56"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line57"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line58"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line59"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">prePersist</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'prePersist'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line60"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line61"><pre><span class="token T_DOC_COMMENT">     * The postPersist event occurs for an entity after the entity has</span></pre></div><div id="line62"><pre><span class="token T_DOC_COMMENT">     * been made persistent. It will be invoked after the database insert operations.</span></pre></div><div id="line63"><pre><span class="token T_DOC_COMMENT">     * Generated primary key values are available in the postPersist event.</span></pre></div><div id="line64"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line65"><pre><span class="token T_DOC_COMMENT">     * This is an entity lifecycle event.</span></pre></div><div id="line66"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line67"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line68"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line69"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">postPersist</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'postPersist'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line70"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line71"><pre><span class="token T_DOC_COMMENT">     * The preUpdate event occurs before the database update operations to</span></pre></div><div id="line72"><pre><span class="token T_DOC_COMMENT">     * entity data.</span></pre></div><div id="line73"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line74"><pre><span class="token T_DOC_COMMENT">     * This is an entity lifecycle event.</span></pre></div><div id="line75"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line76"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line77"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line78"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">preUpdate</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'preUpdate'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line79"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line80"><pre><span class="token T_DOC_COMMENT">     * The postUpdate event occurs after the database update operations to</span></pre></div><div id="line81"><pre><span class="token T_DOC_COMMENT">     * entity data.</span></pre></div><div id="line82"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line83"><pre><span class="token T_DOC_COMMENT">     * This is an entity lifecycle event.</span></pre></div><div id="line84"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line85"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line86"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line87"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">postUpdate</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'postUpdate'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line88"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line89"><pre><span class="token T_DOC_COMMENT">     * The postLoad event occurs for an entity after the entity has been loaded</span></pre></div><div id="line90"><pre><span class="token T_DOC_COMMENT">     * into the current EntityManager from the database or after the refresh operation</span></pre></div><div id="line91"><pre><span class="token T_DOC_COMMENT">     * has been applied to it.</span></pre></div><div id="line92"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line93"><pre><span class="token T_DOC_COMMENT">     * Note that the postLoad event occurs for an entity before any associations have been</span></pre></div><div id="line94"><pre><span class="token T_DOC_COMMENT">     * initialized. Therefore it is not safe to access associations in a postLoad callback</span></pre></div><div id="line95"><pre><span class="token T_DOC_COMMENT">     * or event handler.</span></pre></div><div id="line96"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line97"><pre><span class="token T_DOC_COMMENT">     * This is an entity lifecycle event.</span></pre></div><div id="line98"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line99"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line100"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line101"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">postLoad</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'postLoad'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line102"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line103"><pre><span class="token T_DOC_COMMENT">     * The loadClassMetadata event occurs after the mapping metadata for a class</span></pre></div><div id="line104"><pre><span class="token T_DOC_COMMENT">     * has been loaded from a mapping source (annotations/xml/yaml).</span></pre></div><div id="line105"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line106"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line107"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line108"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">loadClassMetadata</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'loadClassMetadata'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line109"><br/></div><div id="line110"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line111"><pre><span class="token T_DOC_COMMENT">     * The preFlush event occurs when the EntityManager#flush() operation is invoked,</span></pre></div><div id="line112"><pre><span class="token T_DOC_COMMENT">     * but before any changes to managed entites have been calculated. This event is</span></pre></div><div id="line113"><pre><span class="token T_DOC_COMMENT">     * always raised right after EntityManager#flush() call.</span></pre></div><div id="line114"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line115"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">preFlush</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'preFlush'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line116"><br/></div><div id="line117"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line118"><pre><span class="token T_DOC_COMMENT">     * The onFlush event occurs when the EntityManager#flush() operation is invoked,</span></pre></div><div id="line119"><pre><span class="token T_DOC_COMMENT">     * after any changes to managed entities have been determined but before any</span></pre></div><div id="line120"><pre><span class="token T_DOC_COMMENT">     * actual database operations are executed. The event is only raised if there is</span></pre></div><div id="line121"><pre><span class="token T_DOC_COMMENT">     * actually something to do for the underlying UnitOfWork. If nothing needs to be done,</span></pre></div><div id="line122"><pre><span class="token T_DOC_COMMENT">     * the onFlush event is not raised.</span></pre></div><div id="line123"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line124"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line125"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line126"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">onFlush</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'onFlush'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line127"><br/></div><div id="line128"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line129"><pre><span class="token T_DOC_COMMENT">     * The postFlush event occurs when the EntityManager#flush() operation is invoked and</span></pre></div><div id="line130"><pre><span class="token T_DOC_COMMENT">     * after all actual database operations are executed successfully. The event is only raised if there is</span></pre></div><div id="line131"><pre><span class="token T_DOC_COMMENT">     * actually something to do for the underlying UnitOfWork. If nothing needs to be done,</span></pre></div><div id="line132"><pre><span class="token T_DOC_COMMENT">     * the postFlush event is not raised. The event won't be raised if an error occurs during the</span></pre></div><div id="line133"><pre><span class="token T_DOC_COMMENT">     * flush operation.</span></pre></div><div id="line134"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line135"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line136"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line137"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">postFlush</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'postFlush'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line138"><br/></div><div id="line139"><pre><span class="token T_WHITESPACE">    </span><span class="token T_DOC_COMMENT">/**</span></pre></div><div id="line140"><pre><span class="token T_DOC_COMMENT">     * The onClear event occurs when the EntityManager#clear() operation is invoked,</span></pre></div><div id="line141"><pre><span class="token T_DOC_COMMENT">     * after all references to entities have been removed from the unit of work.</span></pre></div><div id="line142"><pre><span class="token T_DOC_COMMENT">     *</span></pre></div><div id="line143"><pre><span class="token T_DOC_COMMENT">     * @var string</span></pre></div><div id="line144"><pre><span class="token T_DOC_COMMENT">     */</span></pre></div><div id="line145"><pre><span class="token T_WHITESPACE">    </span><span class="token T_CONST">const</span><span class="token T_WHITESPACE"> </span><span class="token T_STRING">onClear</span><span class="token T_WHITESPACE"> </span><span class="token T_PHPDOX_EQUAL">=</span><span class="token T_WHITESPACE"> </span><span class="token T_CONSTANT_ENCAPSED_STRING">'onClear'</span><span class="token T_PHPDOX_SEMICOLON">;</span></pre></div><div id="line146"><pre><span class="token T_PHPDOX_CLOSE_CURLY">}</span></pre></div><div id="line147"><br/></div></td></tr></table></section></div><footer><span/></footer></body></html>
